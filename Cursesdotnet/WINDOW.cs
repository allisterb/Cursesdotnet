//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.8
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class WINDOW : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal WINDOW(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(WINDOW obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~WINDOW() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          _cursesPINVOKE.delete_WINDOW(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public int _cury {
    set {
      _cursesPINVOKE.WINDOW__cury_set(swigCPtr, value);
    } 
    get {
      int ret = _cursesPINVOKE.WINDOW__cury_get(swigCPtr);
      return ret;
    } 
  }

  public int _curx {
    set {
      _cursesPINVOKE.WINDOW__curx_set(swigCPtr, value);
    } 
    get {
      int ret = _cursesPINVOKE.WINDOW__curx_get(swigCPtr);
      return ret;
    } 
  }

  public int _maxy {
    set {
      _cursesPINVOKE.WINDOW__maxy_set(swigCPtr, value);
    } 
    get {
      int ret = _cursesPINVOKE.WINDOW__maxy_get(swigCPtr);
      return ret;
    } 
  }

  public int _maxx {
    set {
      _cursesPINVOKE.WINDOW__maxx_set(swigCPtr, value);
    } 
    get {
      int ret = _cursesPINVOKE.WINDOW__maxx_get(swigCPtr);
      return ret;
    } 
  }

  public int _begy {
    set {
      _cursesPINVOKE.WINDOW__begy_set(swigCPtr, value);
    } 
    get {
      int ret = _cursesPINVOKE.WINDOW__begy_get(swigCPtr);
      return ret;
    } 
  }

  public int _begx {
    set {
      _cursesPINVOKE.WINDOW__begx_set(swigCPtr, value);
    } 
    get {
      int ret = _cursesPINVOKE.WINDOW__begx_get(swigCPtr);
      return ret;
    } 
  }

  public int _flags {
    set {
      _cursesPINVOKE.WINDOW__flags_set(swigCPtr, value);
    } 
    get {
      int ret = _cursesPINVOKE.WINDOW__flags_get(swigCPtr);
      return ret;
    } 
  }

  public uint _attrs {
    set {
      _cursesPINVOKE.WINDOW__attrs_set(swigCPtr, value);
    } 
    get {
      uint ret = _cursesPINVOKE.WINDOW__attrs_get(swigCPtr);
      return ret;
    } 
  }

  public uint _bkgd {
    set {
      _cursesPINVOKE.WINDOW__bkgd_set(swigCPtr, value);
    } 
    get {
      uint ret = _cursesPINVOKE.WINDOW__bkgd_get(swigCPtr);
      return ret;
    } 
  }

  public bool _clear {
    set {
      _cursesPINVOKE.WINDOW__clear_set(swigCPtr, value);
    } 
    get {
      bool ret = _cursesPINVOKE.WINDOW__clear_get(swigCPtr);
      return ret;
    } 
  }

  public bool _leaveit {
    set {
      _cursesPINVOKE.WINDOW__leaveit_set(swigCPtr, value);
    } 
    get {
      bool ret = _cursesPINVOKE.WINDOW__leaveit_get(swigCPtr);
      return ret;
    } 
  }

  public bool _scroll {
    set {
      _cursesPINVOKE.WINDOW__scroll_set(swigCPtr, value);
    } 
    get {
      bool ret = _cursesPINVOKE.WINDOW__scroll_get(swigCPtr);
      return ret;
    } 
  }

  public bool _nodelay {
    set {
      _cursesPINVOKE.WINDOW__nodelay_set(swigCPtr, value);
    } 
    get {
      bool ret = _cursesPINVOKE.WINDOW__nodelay_get(swigCPtr);
      return ret;
    } 
  }

  public bool _immed {
    set {
      _cursesPINVOKE.WINDOW__immed_set(swigCPtr, value);
    } 
    get {
      bool ret = _cursesPINVOKE.WINDOW__immed_get(swigCPtr);
      return ret;
    } 
  }

  public bool _sync {
    set {
      _cursesPINVOKE.WINDOW__sync_set(swigCPtr, value);
    } 
    get {
      bool ret = _cursesPINVOKE.WINDOW__sync_get(swigCPtr);
      return ret;
    } 
  }

  public bool _use_keypad {
    set {
      _cursesPINVOKE.WINDOW__use_keypad_set(swigCPtr, value);
    } 
    get {
      bool ret = _cursesPINVOKE.WINDOW__use_keypad_get(swigCPtr);
      return ret;
    } 
  }

  public SWIGTYPE_p_p_unsigned_long _y {
    set {
      _cursesPINVOKE.WINDOW__y_set(swigCPtr, SWIGTYPE_p_p_unsigned_long.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = _cursesPINVOKE.WINDOW__y_get(swigCPtr);
      SWIGTYPE_p_p_unsigned_long ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_p_unsigned_long(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_int _firstch {
    set {
      _cursesPINVOKE.WINDOW__firstch_set(swigCPtr, SWIGTYPE_p_int.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = _cursesPINVOKE.WINDOW__firstch_get(swigCPtr);
      SWIGTYPE_p_int ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_int(cPtr, false);
      return ret;
    } 
  }

  public SWIGTYPE_p_int _lastch {
    set {
      _cursesPINVOKE.WINDOW__lastch_set(swigCPtr, SWIGTYPE_p_int.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = _cursesPINVOKE.WINDOW__lastch_get(swigCPtr);
      SWIGTYPE_p_int ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_int(cPtr, false);
      return ret;
    } 
  }

  public int _tmarg {
    set {
      _cursesPINVOKE.WINDOW__tmarg_set(swigCPtr, value);
    } 
    get {
      int ret = _cursesPINVOKE.WINDOW__tmarg_get(swigCPtr);
      return ret;
    } 
  }

  public int _bmarg {
    set {
      _cursesPINVOKE.WINDOW__bmarg_set(swigCPtr, value);
    } 
    get {
      int ret = _cursesPINVOKE.WINDOW__bmarg_get(swigCPtr);
      return ret;
    } 
  }

  public int _delayms {
    set {
      _cursesPINVOKE.WINDOW__delayms_set(swigCPtr, value);
    } 
    get {
      int ret = _cursesPINVOKE.WINDOW__delayms_get(swigCPtr);
      return ret;
    } 
  }

  public int _parx {
    set {
      _cursesPINVOKE.WINDOW__parx_set(swigCPtr, value);
    } 
    get {
      int ret = _cursesPINVOKE.WINDOW__parx_get(swigCPtr);
      return ret;
    } 
  }

  public int _pary {
    set {
      _cursesPINVOKE.WINDOW__pary_set(swigCPtr, value);
    } 
    get {
      int ret = _cursesPINVOKE.WINDOW__pary_get(swigCPtr);
      return ret;
    } 
  }

  public WINDOW _parent {
    set {
      _cursesPINVOKE.WINDOW__parent_set(swigCPtr, WINDOW.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = _cursesPINVOKE.WINDOW__parent_get(swigCPtr);
      WINDOW ret = (cPtr == global::System.IntPtr.Zero) ? null : new WINDOW(cPtr, false);
      return ret;
    } 
  }

  public WINDOW() : this(_cursesPINVOKE.new_WINDOW(), true) {
  }

}
