//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.8
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class SCREEN : global::System.IDisposable {
  private global::System.Runtime.InteropServices.HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal SCREEN(global::System.IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new global::System.Runtime.InteropServices.HandleRef(this, cPtr);
  }

  internal static global::System.Runtime.InteropServices.HandleRef getCPtr(SCREEN obj) {
    return (obj == null) ? new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero) : obj.swigCPtr;
  }

  ~SCREEN() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != global::System.IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          _cursesPINVOKE.delete_SCREEN(swigCPtr);
        }
        swigCPtr = new global::System.Runtime.InteropServices.HandleRef(null, global::System.IntPtr.Zero);
      }
      global::System.GC.SuppressFinalize(this);
    }
  }

  public bool alive {
    set {
      _cursesPINVOKE.SCREEN_alive_set(swigCPtr, value);
    } 
    get {
      bool ret = _cursesPINVOKE.SCREEN_alive_get(swigCPtr);
      return ret;
    } 
  }

  public bool autocr {
    set {
      _cursesPINVOKE.SCREEN_autocr_set(swigCPtr, value);
    } 
    get {
      bool ret = _cursesPINVOKE.SCREEN_autocr_get(swigCPtr);
      return ret;
    } 
  }

  public bool cbreak {
    set {
      _cursesPINVOKE.SCREEN_cbreak_set(swigCPtr, value);
    } 
    get {
      bool ret = _cursesPINVOKE.SCREEN_cbreak_get(swigCPtr);
      return ret;
    } 
  }

  public bool echo {
    set {
      _cursesPINVOKE.SCREEN_echo_set(swigCPtr, value);
    } 
    get {
      bool ret = _cursesPINVOKE.SCREEN_echo_get(swigCPtr);
      return ret;
    } 
  }

  public bool raw_inp {
    set {
      _cursesPINVOKE.SCREEN_raw_inp_set(swigCPtr, value);
    } 
    get {
      bool ret = _cursesPINVOKE.SCREEN_raw_inp_get(swigCPtr);
      return ret;
    } 
  }

  public bool raw_out {
    set {
      _cursesPINVOKE.SCREEN_raw_out_set(swigCPtr, value);
    } 
    get {
      bool ret = _cursesPINVOKE.SCREEN_raw_out_get(swigCPtr);
      return ret;
    } 
  }

  public bool audible {
    set {
      _cursesPINVOKE.SCREEN_audible_set(swigCPtr, value);
    } 
    get {
      bool ret = _cursesPINVOKE.SCREEN_audible_get(swigCPtr);
      return ret;
    } 
  }

  public bool mono {
    set {
      _cursesPINVOKE.SCREEN_mono_set(swigCPtr, value);
    } 
    get {
      bool ret = _cursesPINVOKE.SCREEN_mono_get(swigCPtr);
      return ret;
    } 
  }

  public bool resized {
    set {
      _cursesPINVOKE.SCREEN_resized_set(swigCPtr, value);
    } 
    get {
      bool ret = _cursesPINVOKE.SCREEN_resized_get(swigCPtr);
      return ret;
    } 
  }

  public bool orig_attr {
    set {
      _cursesPINVOKE.SCREEN_orig_attr_set(swigCPtr, value);
    } 
    get {
      bool ret = _cursesPINVOKE.SCREEN_orig_attr_get(swigCPtr);
      return ret;
    } 
  }

  public short orig_fore {
    set {
      _cursesPINVOKE.SCREEN_orig_fore_set(swigCPtr, value);
    } 
    get {
      short ret = _cursesPINVOKE.SCREEN_orig_fore_get(swigCPtr);
      return ret;
    } 
  }

  public short orig_back {
    set {
      _cursesPINVOKE.SCREEN_orig_back_set(swigCPtr, value);
    } 
    get {
      short ret = _cursesPINVOKE.SCREEN_orig_back_get(swigCPtr);
      return ret;
    } 
  }

  public int cursrow {
    set {
      _cursesPINVOKE.SCREEN_cursrow_set(swigCPtr, value);
    } 
    get {
      int ret = _cursesPINVOKE.SCREEN_cursrow_get(swigCPtr);
      return ret;
    } 
  }

  public int curscol {
    set {
      _cursesPINVOKE.SCREEN_curscol_set(swigCPtr, value);
    } 
    get {
      int ret = _cursesPINVOKE.SCREEN_curscol_get(swigCPtr);
      return ret;
    } 
  }

  public int visibility {
    set {
      _cursesPINVOKE.SCREEN_visibility_set(swigCPtr, value);
    } 
    get {
      int ret = _cursesPINVOKE.SCREEN_visibility_get(swigCPtr);
      return ret;
    } 
  }

  public int orig_cursor {
    set {
      _cursesPINVOKE.SCREEN_orig_cursor_set(swigCPtr, value);
    } 
    get {
      int ret = _cursesPINVOKE.SCREEN_orig_cursor_get(swigCPtr);
      return ret;
    } 
  }

  public int lines {
    set {
      _cursesPINVOKE.SCREEN_lines_set(swigCPtr, value);
    } 
    get {
      int ret = _cursesPINVOKE.SCREEN_lines_get(swigCPtr);
      return ret;
    } 
  }

  public int cols {
    set {
      _cursesPINVOKE.SCREEN_cols_set(swigCPtr, value);
    } 
    get {
      int ret = _cursesPINVOKE.SCREEN_cols_get(swigCPtr);
      return ret;
    } 
  }

  public uint _trap_mbe {
    set {
      _cursesPINVOKE.SCREEN__trap_mbe_set(swigCPtr, value);
    } 
    get {
      uint ret = _cursesPINVOKE.SCREEN__trap_mbe_get(swigCPtr);
      return ret;
    } 
  }

  public uint _map_mbe_to_key {
    set {
      _cursesPINVOKE.SCREEN__map_mbe_to_key_set(swigCPtr, value);
    } 
    get {
      uint ret = _cursesPINVOKE.SCREEN__map_mbe_to_key_get(swigCPtr);
      return ret;
    } 
  }

  public int mouse_wait {
    set {
      _cursesPINVOKE.SCREEN_mouse_wait_set(swigCPtr, value);
    } 
    get {
      int ret = _cursesPINVOKE.SCREEN_mouse_wait_get(swigCPtr);
      return ret;
    } 
  }

  public int slklines {
    set {
      _cursesPINVOKE.SCREEN_slklines_set(swigCPtr, value);
    } 
    get {
      int ret = _cursesPINVOKE.SCREEN_slklines_get(swigCPtr);
      return ret;
    } 
  }

  public WINDOW slk_winptr {
    set {
      _cursesPINVOKE.SCREEN_slk_winptr_set(swigCPtr, WINDOW.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = _cursesPINVOKE.SCREEN_slk_winptr_get(swigCPtr);
      WINDOW ret = (cPtr == global::System.IntPtr.Zero) ? null : new WINDOW(cPtr, false);
      return ret;
    } 
  }

  public int linesrippedoff {
    set {
      _cursesPINVOKE.SCREEN_linesrippedoff_set(swigCPtr, value);
    } 
    get {
      int ret = _cursesPINVOKE.SCREEN_linesrippedoff_get(swigCPtr);
      return ret;
    } 
  }

  public int linesrippedoffontop {
    set {
      _cursesPINVOKE.SCREEN_linesrippedoffontop_set(swigCPtr, value);
    } 
    get {
      int ret = _cursesPINVOKE.SCREEN_linesrippedoffontop_get(swigCPtr);
      return ret;
    } 
  }

  public int delaytenths {
    set {
      _cursesPINVOKE.SCREEN_delaytenths_set(swigCPtr, value);
    } 
    get {
      int ret = _cursesPINVOKE.SCREEN_delaytenths_get(swigCPtr);
      return ret;
    } 
  }

  public bool _preserve {
    set {
      _cursesPINVOKE.SCREEN__preserve_set(swigCPtr, value);
    } 
    get {
      bool ret = _cursesPINVOKE.SCREEN__preserve_get(swigCPtr);
      return ret;
    } 
  }

  public int _restore {
    set {
      _cursesPINVOKE.SCREEN__restore_set(swigCPtr, value);
    } 
    get {
      int ret = _cursesPINVOKE.SCREEN__restore_get(swigCPtr);
      return ret;
    } 
  }

  public bool save_key_modifiers {
    set {
      _cursesPINVOKE.SCREEN_save_key_modifiers_set(swigCPtr, value);
    } 
    get {
      bool ret = _cursesPINVOKE.SCREEN_save_key_modifiers_get(swigCPtr);
      return ret;
    } 
  }

  public bool return_key_modifiers {
    set {
      _cursesPINVOKE.SCREEN_return_key_modifiers_set(swigCPtr, value);
    } 
    get {
      bool ret = _cursesPINVOKE.SCREEN_return_key_modifiers_get(swigCPtr);
      return ret;
    } 
  }

  public bool key_code {
    set {
      _cursesPINVOKE.SCREEN_key_code_set(swigCPtr, value);
    } 
    get {
      bool ret = _cursesPINVOKE.SCREEN_key_code_get(swigCPtr);
      return ret;
    } 
  }

  public short line_color {
    set {
      _cursesPINVOKE.SCREEN_line_color_set(swigCPtr, value);
    } 
    get {
      short ret = _cursesPINVOKE.SCREEN_line_color_get(swigCPtr);
      return ret;
    } 
  }

  public SCREEN() : this(_cursesPINVOKE.new_SCREEN(), true) {
  }

}
