//------------------------------------------------------------------------------
// <auto-generated />
//
// This file was automatically generated by SWIG (http://www.swig.org).
// Version 3.0.8
//
// Do not make changes to this file unless you know what you are doing--modify
// the SWIG interface file instead.
//------------------------------------------------------------------------------


public class _curses {
  public static int LINES {
    set {
      _cursesPINVOKE.LINES_set(value);
    } 
    get {
      int ret = _cursesPINVOKE.LINES_get();
      return ret;
    } 
  }

  public static int COLS {
    set {
      _cursesPINVOKE.COLS_set(value);
    } 
    get {
      int ret = _cursesPINVOKE.COLS_get();
      return ret;
    } 
  }

  public static WINDOW stdscr {
    set {
      _cursesPINVOKE.stdscr_set(WINDOW.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = _cursesPINVOKE.stdscr_get();
      WINDOW ret = (cPtr == global::System.IntPtr.Zero) ? null : new WINDOW(cPtr, false);
      return ret;
    } 
  }

  public static WINDOW curscr {
    set {
      _cursesPINVOKE.curscr_set(WINDOW.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = _cursesPINVOKE.curscr_get();
      WINDOW ret = (cPtr == global::System.IntPtr.Zero) ? null : new WINDOW(cPtr, false);
      return ret;
    } 
  }

  public static SCREEN SP {
    set {
      _cursesPINVOKE.SP_set(SCREEN.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = _cursesPINVOKE.SP_get();
      SCREEN ret = (cPtr == global::System.IntPtr.Zero) ? null : new SCREEN(cPtr, false);
      return ret;
    } 
  }

  public static MOUSE_STATUS Mouse_status {
    set {
      _cursesPINVOKE.Mouse_status_set(MOUSE_STATUS.getCPtr(value));
    } 
    get {
      global::System.IntPtr cPtr = _cursesPINVOKE.Mouse_status_get();
      MOUSE_STATUS ret = (cPtr == global::System.IntPtr.Zero) ? null : new MOUSE_STATUS(cPtr, false);
      return ret;
    } 
  }

  public static int COLORS {
    set {
      _cursesPINVOKE.COLORS_set(value);
    } 
    get {
      int ret = _cursesPINVOKE.COLORS_get();
      return ret;
    } 
  }

  public static int COLOR_PAIRS {
    set {
      _cursesPINVOKE.COLOR_PAIRS_set(value);
    } 
    get {
      int ret = _cursesPINVOKE.COLOR_PAIRS_get();
      return ret;
    } 
  }

  public static int TABSIZE {
    set {
      _cursesPINVOKE.TABSIZE_set(value);
    } 
    get {
      int ret = _cursesPINVOKE.TABSIZE_get();
      return ret;
    } 
  }

  public static SWIGTYPE_p_long acs_map {
    get {
      global::System.IntPtr cPtr = _cursesPINVOKE.acs_map_get();
      SWIGTYPE_p_long ret = (cPtr == global::System.IntPtr.Zero) ? null : new SWIGTYPE_p_long(cPtr, false);
      return ret;
    } 
  }

  public static string ttytype {
    set {
      _cursesPINVOKE.ttytype_set(value);
    } 
    get {
      string ret = _cursesPINVOKE.ttytype_get();
      return ret;
    } 
  }

  public static int addch(uint arg0) {
    int ret = _cursesPINVOKE.addch(arg0);
    return ret;
  }

  public static int addchnstr(SWIGTYPE_p_unsigned_long arg0, int arg1) {
    int ret = _cursesPINVOKE.addchnstr(SWIGTYPE_p_unsigned_long.getCPtr(arg0), arg1);
    return ret;
  }

  public static int addchstr(SWIGTYPE_p_unsigned_long arg0) {
    int ret = _cursesPINVOKE.addchstr(SWIGTYPE_p_unsigned_long.getCPtr(arg0));
    return ret;
  }

  public static int addnstr(string arg0, int arg1) {
    int ret = _cursesPINVOKE.addnstr(arg0, arg1);
    return ret;
  }

  public static int addstr(string arg0) {
    int ret = _cursesPINVOKE.addstr(arg0);
    return ret;
  }

  public static int attroff(uint arg0) {
    int ret = _cursesPINVOKE.attroff(arg0);
    return ret;
  }

  public static int attron(uint arg0) {
    int ret = _cursesPINVOKE.attron(arg0);
    return ret;
  }

  public static int attrset(uint arg0) {
    int ret = _cursesPINVOKE.attrset(arg0);
    return ret;
  }

  public static int attr_get(SWIGTYPE_p_attr_t arg0, SWIGTYPE_p_short arg1, SWIGTYPE_p_void arg2) {
    int ret = _cursesPINVOKE.attr_get(SWIGTYPE_p_attr_t.getCPtr(arg0), SWIGTYPE_p_short.getCPtr(arg1), SWIGTYPE_p_void.getCPtr(arg2));
    return ret;
  }

  public static int attr_off(SWIGTYPE_p_attr_t arg0, SWIGTYPE_p_void arg1) {
    int ret = _cursesPINVOKE.attr_off(SWIGTYPE_p_attr_t.getCPtr(arg0), SWIGTYPE_p_void.getCPtr(arg1));
    if (_cursesPINVOKE.SWIGPendingException.Pending) throw _cursesPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int attr_on(SWIGTYPE_p_attr_t arg0, SWIGTYPE_p_void arg1) {
    int ret = _cursesPINVOKE.attr_on(SWIGTYPE_p_attr_t.getCPtr(arg0), SWIGTYPE_p_void.getCPtr(arg1));
    if (_cursesPINVOKE.SWIGPendingException.Pending) throw _cursesPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int attr_set(SWIGTYPE_p_attr_t arg0, short arg1, SWIGTYPE_p_void arg2) {
    int ret = _cursesPINVOKE.attr_set(SWIGTYPE_p_attr_t.getCPtr(arg0), arg1, SWIGTYPE_p_void.getCPtr(arg2));
    if (_cursesPINVOKE.SWIGPendingException.Pending) throw _cursesPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int baudrate() {
    int ret = _cursesPINVOKE.baudrate();
    return ret;
  }

  public static int beep() {
    int ret = _cursesPINVOKE.beep();
    return ret;
  }

  public static int bkgd(uint arg0) {
    int ret = _cursesPINVOKE.bkgd(arg0);
    return ret;
  }

  public static void bkgdset(uint arg0) {
    _cursesPINVOKE.bkgdset(arg0);
  }

  public static int border(uint arg0, uint arg1, uint arg2, uint arg3, uint arg4, uint arg5, uint arg6, uint arg7) {
    int ret = _cursesPINVOKE.border(arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7);
    return ret;
  }

  public static int box(WINDOW arg0, uint arg1, uint arg2) {
    int ret = _cursesPINVOKE.box(WINDOW.getCPtr(arg0), arg1, arg2);
    return ret;
  }

  public static bool can_change_color() {
    bool ret = _cursesPINVOKE.can_change_color();
    return ret;
  }

  public static int cbreak() {
    int ret = _cursesPINVOKE.cbreak();
    return ret;
  }

  public static int chgat(int arg0, SWIGTYPE_p_attr_t arg1, short arg2, SWIGTYPE_p_void arg3) {
    int ret = _cursesPINVOKE.chgat(arg0, SWIGTYPE_p_attr_t.getCPtr(arg1), arg2, SWIGTYPE_p_void.getCPtr(arg3));
    if (_cursesPINVOKE.SWIGPendingException.Pending) throw _cursesPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int clearok(WINDOW arg0, bool arg1) {
    int ret = _cursesPINVOKE.clearok(WINDOW.getCPtr(arg0), arg1);
    return ret;
  }

  public static int clear() {
    int ret = _cursesPINVOKE.clear();
    return ret;
  }

  public static int clrtobot() {
    int ret = _cursesPINVOKE.clrtobot();
    return ret;
  }

  public static int clrtoeol() {
    int ret = _cursesPINVOKE.clrtoeol();
    return ret;
  }

  public static int color_content(short arg0, SWIGTYPE_p_short arg1, SWIGTYPE_p_short arg2, SWIGTYPE_p_short arg3) {
    int ret = _cursesPINVOKE.color_content(arg0, SWIGTYPE_p_short.getCPtr(arg1), SWIGTYPE_p_short.getCPtr(arg2), SWIGTYPE_p_short.getCPtr(arg3));
    return ret;
  }

  public static int color_set(short arg0, SWIGTYPE_p_void arg1) {
    int ret = _cursesPINVOKE.color_set(arg0, SWIGTYPE_p_void.getCPtr(arg1));
    return ret;
  }

  public static int copywin(WINDOW arg0, WINDOW arg1, int arg2, int arg3, int arg4, int arg5, int arg6, int arg7, int arg8) {
    int ret = _cursesPINVOKE.copywin(WINDOW.getCPtr(arg0), WINDOW.getCPtr(arg1), arg2, arg3, arg4, arg5, arg6, arg7, arg8);
    return ret;
  }

  public static int curs_set(int arg0) {
    int ret = _cursesPINVOKE.curs_set(arg0);
    return ret;
  }

  public static int def_prog_mode() {
    int ret = _cursesPINVOKE.def_prog_mode();
    return ret;
  }

  public static int def_shell_mode() {
    int ret = _cursesPINVOKE.def_shell_mode();
    return ret;
  }

  public static int delay_output(int arg0) {
    int ret = _cursesPINVOKE.delay_output(arg0);
    return ret;
  }

  public static int delch() {
    int ret = _cursesPINVOKE.delch();
    return ret;
  }

  public static int deleteln() {
    int ret = _cursesPINVOKE.deleteln();
    return ret;
  }

  public static void delscreen(SCREEN arg0) {
    _cursesPINVOKE.delscreen(SCREEN.getCPtr(arg0));
  }

  public static int delwin(WINDOW arg0) {
    int ret = _cursesPINVOKE.delwin(WINDOW.getCPtr(arg0));
    return ret;
  }

  public static WINDOW derwin(WINDOW arg0, int arg1, int arg2, int arg3, int arg4) {
    global::System.IntPtr cPtr = _cursesPINVOKE.derwin(WINDOW.getCPtr(arg0), arg1, arg2, arg3, arg4);
    WINDOW ret = (cPtr == global::System.IntPtr.Zero) ? null : new WINDOW(cPtr, false);
    return ret;
  }

  public static int doupdate() {
    int ret = _cursesPINVOKE.doupdate();
    return ret;
  }

  public static WINDOW dupwin(WINDOW arg0) {
    global::System.IntPtr cPtr = _cursesPINVOKE.dupwin(WINDOW.getCPtr(arg0));
    WINDOW ret = (cPtr == global::System.IntPtr.Zero) ? null : new WINDOW(cPtr, false);
    return ret;
  }

  public static int echochar(uint arg0) {
    int ret = _cursesPINVOKE.echochar(arg0);
    return ret;
  }

  public static int echo() {
    int ret = _cursesPINVOKE.echo();
    return ret;
  }

  public static int endwin() {
    int ret = _cursesPINVOKE.endwin();
    return ret;
  }

  public static char erasechar() {
    char ret = _cursesPINVOKE.erasechar();
    return ret;
  }

  public static int erase() {
    int ret = _cursesPINVOKE.erase();
    return ret;
  }

  public static void filter() {
    _cursesPINVOKE.filter();
  }

  public static int flash() {
    int ret = _cursesPINVOKE.flash();
    return ret;
  }

  public static int flushinp() {
    int ret = _cursesPINVOKE.flushinp();
    return ret;
  }

  public static uint getbkgd(WINDOW arg0) {
    uint ret = _cursesPINVOKE.getbkgd(WINDOW.getCPtr(arg0));
    return ret;
  }

  public static int getch() {
    int ret = _cursesPINVOKE.getch();
    return ret;
  }

  public static int getnstr(string arg0, int arg1) {
    int ret = _cursesPINVOKE.getnstr(arg0, arg1);
    return ret;
  }

  public static int getstr(string arg0) {
    int ret = _cursesPINVOKE.getstr(arg0);
    return ret;
  }

  public static WINDOW getwin(SWIGTYPE_p_FILE arg0) {
    global::System.IntPtr cPtr = _cursesPINVOKE.getwin(SWIGTYPE_p_FILE.getCPtr(arg0));
    WINDOW ret = (cPtr == global::System.IntPtr.Zero) ? null : new WINDOW(cPtr, false);
    return ret;
  }

  public static int halfdelay(int arg0) {
    int ret = _cursesPINVOKE.halfdelay(arg0);
    return ret;
  }

  public static bool has_colors() {
    bool ret = _cursesPINVOKE.has_colors();
    return ret;
  }

  public static bool has_ic() {
    bool ret = _cursesPINVOKE.has_ic();
    return ret;
  }

  public static bool has_il() {
    bool ret = _cursesPINVOKE.has_il();
    return ret;
  }

  public static int hline(uint arg0, int arg1) {
    int ret = _cursesPINVOKE.hline(arg0, arg1);
    return ret;
  }

  public static void idcok(WINDOW arg0, bool arg1) {
    _cursesPINVOKE.idcok(WINDOW.getCPtr(arg0), arg1);
  }

  public static int idlok(WINDOW arg0, bool arg1) {
    int ret = _cursesPINVOKE.idlok(WINDOW.getCPtr(arg0), arg1);
    return ret;
  }

  public static void immedok(WINDOW arg0, bool arg1) {
    _cursesPINVOKE.immedok(WINDOW.getCPtr(arg0), arg1);
  }

  public static int inchnstr(SWIGTYPE_p_unsigned_long arg0, int arg1) {
    int ret = _cursesPINVOKE.inchnstr(SWIGTYPE_p_unsigned_long.getCPtr(arg0), arg1);
    return ret;
  }

  public static int inchstr(SWIGTYPE_p_unsigned_long arg0) {
    int ret = _cursesPINVOKE.inchstr(SWIGTYPE_p_unsigned_long.getCPtr(arg0));
    return ret;
  }

  public static uint inch() {
    uint ret = _cursesPINVOKE.inch();
    return ret;
  }

  public static int init_color(short arg0, short arg1, short arg2, short arg3) {
    int ret = _cursesPINVOKE.init_color(arg0, arg1, arg2, arg3);
    return ret;
  }

  public static int init_pair(short arg0, short arg1, short arg2) {
    int ret = _cursesPINVOKE.init_pair(arg0, arg1, arg2);
    return ret;
  }

  public static WINDOW initscr() {
    global::System.IntPtr cPtr = _cursesPINVOKE.initscr();
    WINDOW ret = (cPtr == global::System.IntPtr.Zero) ? null : new WINDOW(cPtr, false);
    return ret;
  }

  public static int innstr(string arg0, int arg1) {
    int ret = _cursesPINVOKE.innstr(arg0, arg1);
    return ret;
  }

  public static int insch(uint arg0) {
    int ret = _cursesPINVOKE.insch(arg0);
    return ret;
  }

  public static int insdelln(int arg0) {
    int ret = _cursesPINVOKE.insdelln(arg0);
    return ret;
  }

  public static int insertln() {
    int ret = _cursesPINVOKE.insertln();
    return ret;
  }

  public static int insnstr(string arg0, int arg1) {
    int ret = _cursesPINVOKE.insnstr(arg0, arg1);
    return ret;
  }

  public static int insstr(string arg0) {
    int ret = _cursesPINVOKE.insstr(arg0);
    return ret;
  }

  public static int instr(string arg0) {
    int ret = _cursesPINVOKE.instr(arg0);
    return ret;
  }

  public static int intrflush(WINDOW arg0, bool arg1) {
    int ret = _cursesPINVOKE.intrflush(WINDOW.getCPtr(arg0), arg1);
    return ret;
  }

  public static bool isendwin() {
    bool ret = _cursesPINVOKE.isendwin();
    return ret;
  }

  public static bool is_linetouched(WINDOW arg0, int arg1) {
    bool ret = _cursesPINVOKE.is_linetouched(WINDOW.getCPtr(arg0), arg1);
    return ret;
  }

  public static bool is_wintouched(WINDOW arg0) {
    bool ret = _cursesPINVOKE.is_wintouched(WINDOW.getCPtr(arg0));
    return ret;
  }

  public static string keyname(int arg0) {
    string ret = _cursesPINVOKE.keyname(arg0);
    return ret;
  }

  public static int keypad(WINDOW arg0, bool arg1) {
    int ret = _cursesPINVOKE.keypad(WINDOW.getCPtr(arg0), arg1);
    return ret;
  }

  public static char killchar() {
    char ret = _cursesPINVOKE.killchar();
    return ret;
  }

  public static int leaveok(WINDOW arg0, bool arg1) {
    int ret = _cursesPINVOKE.leaveok(WINDOW.getCPtr(arg0), arg1);
    return ret;
  }

  public static string longname() {
    string ret = _cursesPINVOKE.longname();
    return ret;
  }

  public static int meta(WINDOW arg0, bool arg1) {
    int ret = _cursesPINVOKE.meta(WINDOW.getCPtr(arg0), arg1);
    return ret;
  }

  public static int move(int arg0, int arg1) {
    int ret = _cursesPINVOKE.move(arg0, arg1);
    return ret;
  }

  public static int mvaddch(int arg0, int arg1, uint arg2) {
    int ret = _cursesPINVOKE.mvaddch(arg0, arg1, arg2);
    return ret;
  }

  public static int mvaddchnstr(int arg0, int arg1, SWIGTYPE_p_unsigned_long arg2, int arg3) {
    int ret = _cursesPINVOKE.mvaddchnstr(arg0, arg1, SWIGTYPE_p_unsigned_long.getCPtr(arg2), arg3);
    return ret;
  }

  public static int mvaddchstr(int arg0, int arg1, SWIGTYPE_p_unsigned_long arg2) {
    int ret = _cursesPINVOKE.mvaddchstr(arg0, arg1, SWIGTYPE_p_unsigned_long.getCPtr(arg2));
    return ret;
  }

  public static int mvaddnstr(int arg0, int arg1, string arg2, int arg3) {
    int ret = _cursesPINVOKE.mvaddnstr(arg0, arg1, arg2, arg3);
    return ret;
  }

  public static int mvaddstr(int arg0, int arg1, string arg2) {
    int ret = _cursesPINVOKE.mvaddstr(arg0, arg1, arg2);
    return ret;
  }

  public static int mvchgat(int arg0, int arg1, int arg2, SWIGTYPE_p_attr_t arg3, short arg4, SWIGTYPE_p_void arg5) {
    int ret = _cursesPINVOKE.mvchgat(arg0, arg1, arg2, SWIGTYPE_p_attr_t.getCPtr(arg3), arg4, SWIGTYPE_p_void.getCPtr(arg5));
    if (_cursesPINVOKE.SWIGPendingException.Pending) throw _cursesPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int mvcur(int arg0, int arg1, int arg2, int arg3) {
    int ret = _cursesPINVOKE.mvcur(arg0, arg1, arg2, arg3);
    return ret;
  }

  public static int mvdelch(int arg0, int arg1) {
    int ret = _cursesPINVOKE.mvdelch(arg0, arg1);
    return ret;
  }

  public static int mvderwin(WINDOW arg0, int arg1, int arg2) {
    int ret = _cursesPINVOKE.mvderwin(WINDOW.getCPtr(arg0), arg1, arg2);
    return ret;
  }

  public static int mvgetch(int arg0, int arg1) {
    int ret = _cursesPINVOKE.mvgetch(arg0, arg1);
    return ret;
  }

  public static int mvgetnstr(int arg0, int arg1, string arg2, int arg3) {
    int ret = _cursesPINVOKE.mvgetnstr(arg0, arg1, arg2, arg3);
    return ret;
  }

  public static int mvgetstr(int arg0, int arg1, string arg2) {
    int ret = _cursesPINVOKE.mvgetstr(arg0, arg1, arg2);
    return ret;
  }

  public static int mvhline(int arg0, int arg1, uint arg2, int arg3) {
    int ret = _cursesPINVOKE.mvhline(arg0, arg1, arg2, arg3);
    return ret;
  }

  public static uint mvinch(int arg0, int arg1) {
    uint ret = _cursesPINVOKE.mvinch(arg0, arg1);
    return ret;
  }

  public static int mvinchnstr(int arg0, int arg1, SWIGTYPE_p_unsigned_long arg2, int arg3) {
    int ret = _cursesPINVOKE.mvinchnstr(arg0, arg1, SWIGTYPE_p_unsigned_long.getCPtr(arg2), arg3);
    return ret;
  }

  public static int mvinchstr(int arg0, int arg1, SWIGTYPE_p_unsigned_long arg2) {
    int ret = _cursesPINVOKE.mvinchstr(arg0, arg1, SWIGTYPE_p_unsigned_long.getCPtr(arg2));
    return ret;
  }

  public static int mvinnstr(int arg0, int arg1, string arg2, int arg3) {
    int ret = _cursesPINVOKE.mvinnstr(arg0, arg1, arg2, arg3);
    return ret;
  }

  public static int mvinsch(int arg0, int arg1, uint arg2) {
    int ret = _cursesPINVOKE.mvinsch(arg0, arg1, arg2);
    return ret;
  }

  public static int mvinsnstr(int arg0, int arg1, string arg2, int arg3) {
    int ret = _cursesPINVOKE.mvinsnstr(arg0, arg1, arg2, arg3);
    return ret;
  }

  public static int mvinsstr(int arg0, int arg1, string arg2) {
    int ret = _cursesPINVOKE.mvinsstr(arg0, arg1, arg2);
    return ret;
  }

  public static int mvinstr(int arg0, int arg1, string arg2) {
    int ret = _cursesPINVOKE.mvinstr(arg0, arg1, arg2);
    return ret;
  }

  public static int mvprintw(int arg0, int arg1, string arg2) {
    int ret = _cursesPINVOKE.mvprintw(arg0, arg1, arg2);
    return ret;
  }

  public static int mvscanw(int arg0, int arg1, string arg2) {
    int ret = _cursesPINVOKE.mvscanw(arg0, arg1, arg2);
    return ret;
  }

  public static int mvvline(int arg0, int arg1, uint arg2, int arg3) {
    int ret = _cursesPINVOKE.mvvline(arg0, arg1, arg2, arg3);
    return ret;
  }

  public static int mvwaddchnstr(WINDOW arg0, int arg1, int arg2, SWIGTYPE_p_unsigned_long arg3, int arg4) {
    int ret = _cursesPINVOKE.mvwaddchnstr(WINDOW.getCPtr(arg0), arg1, arg2, SWIGTYPE_p_unsigned_long.getCPtr(arg3), arg4);
    return ret;
  }

  public static int mvwaddchstr(WINDOW arg0, int arg1, int arg2, SWIGTYPE_p_unsigned_long arg3) {
    int ret = _cursesPINVOKE.mvwaddchstr(WINDOW.getCPtr(arg0), arg1, arg2, SWIGTYPE_p_unsigned_long.getCPtr(arg3));
    return ret;
  }

  public static int mvwaddch(WINDOW arg0, int arg1, int arg2, uint arg3) {
    int ret = _cursesPINVOKE.mvwaddch(WINDOW.getCPtr(arg0), arg1, arg2, arg3);
    return ret;
  }

  public static int mvwaddnstr(WINDOW arg0, int arg1, int arg2, string arg3, int arg4) {
    int ret = _cursesPINVOKE.mvwaddnstr(WINDOW.getCPtr(arg0), arg1, arg2, arg3, arg4);
    return ret;
  }

  public static int mvwaddstr(WINDOW arg0, int arg1, int arg2, string arg3) {
    int ret = _cursesPINVOKE.mvwaddstr(WINDOW.getCPtr(arg0), arg1, arg2, arg3);
    return ret;
  }

  public static int mvwchgat(WINDOW arg0, int arg1, int arg2, int arg3, SWIGTYPE_p_attr_t arg4, short arg5, SWIGTYPE_p_void arg6) {
    int ret = _cursesPINVOKE.mvwchgat(WINDOW.getCPtr(arg0), arg1, arg2, arg3, SWIGTYPE_p_attr_t.getCPtr(arg4), arg5, SWIGTYPE_p_void.getCPtr(arg6));
    if (_cursesPINVOKE.SWIGPendingException.Pending) throw _cursesPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int mvwdelch(WINDOW arg0, int arg1, int arg2) {
    int ret = _cursesPINVOKE.mvwdelch(WINDOW.getCPtr(arg0), arg1, arg2);
    return ret;
  }

  public static int mvwgetch(WINDOW arg0, int arg1, int arg2) {
    int ret = _cursesPINVOKE.mvwgetch(WINDOW.getCPtr(arg0), arg1, arg2);
    return ret;
  }

  public static int mvwgetnstr(WINDOW arg0, int arg1, int arg2, string arg3, int arg4) {
    int ret = _cursesPINVOKE.mvwgetnstr(WINDOW.getCPtr(arg0), arg1, arg2, arg3, arg4);
    return ret;
  }

  public static int mvwgetstr(WINDOW arg0, int arg1, int arg2, string arg3) {
    int ret = _cursesPINVOKE.mvwgetstr(WINDOW.getCPtr(arg0), arg1, arg2, arg3);
    return ret;
  }

  public static int mvwhline(WINDOW arg0, int arg1, int arg2, uint arg3, int arg4) {
    int ret = _cursesPINVOKE.mvwhline(WINDOW.getCPtr(arg0), arg1, arg2, arg3, arg4);
    return ret;
  }

  public static int mvwinchnstr(WINDOW arg0, int arg1, int arg2, SWIGTYPE_p_unsigned_long arg3, int arg4) {
    int ret = _cursesPINVOKE.mvwinchnstr(WINDOW.getCPtr(arg0), arg1, arg2, SWIGTYPE_p_unsigned_long.getCPtr(arg3), arg4);
    return ret;
  }

  public static int mvwinchstr(WINDOW arg0, int arg1, int arg2, SWIGTYPE_p_unsigned_long arg3) {
    int ret = _cursesPINVOKE.mvwinchstr(WINDOW.getCPtr(arg0), arg1, arg2, SWIGTYPE_p_unsigned_long.getCPtr(arg3));
    return ret;
  }

  public static uint mvwinch(WINDOW arg0, int arg1, int arg2) {
    uint ret = _cursesPINVOKE.mvwinch(WINDOW.getCPtr(arg0), arg1, arg2);
    return ret;
  }

  public static int mvwinnstr(WINDOW arg0, int arg1, int arg2, string arg3, int arg4) {
    int ret = _cursesPINVOKE.mvwinnstr(WINDOW.getCPtr(arg0), arg1, arg2, arg3, arg4);
    return ret;
  }

  public static int mvwinsch(WINDOW arg0, int arg1, int arg2, uint arg3) {
    int ret = _cursesPINVOKE.mvwinsch(WINDOW.getCPtr(arg0), arg1, arg2, arg3);
    return ret;
  }

  public static int mvwinsnstr(WINDOW arg0, int arg1, int arg2, string arg3, int arg4) {
    int ret = _cursesPINVOKE.mvwinsnstr(WINDOW.getCPtr(arg0), arg1, arg2, arg3, arg4);
    return ret;
  }

  public static int mvwinsstr(WINDOW arg0, int arg1, int arg2, string arg3) {
    int ret = _cursesPINVOKE.mvwinsstr(WINDOW.getCPtr(arg0), arg1, arg2, arg3);
    return ret;
  }

  public static int mvwinstr(WINDOW arg0, int arg1, int arg2, string arg3) {
    int ret = _cursesPINVOKE.mvwinstr(WINDOW.getCPtr(arg0), arg1, arg2, arg3);
    return ret;
  }

  public static int mvwin(WINDOW arg0, int arg1, int arg2) {
    int ret = _cursesPINVOKE.mvwin(WINDOW.getCPtr(arg0), arg1, arg2);
    return ret;
  }

  public static int mvwprintw(WINDOW arg0, int arg1, int arg2, string arg3) {
    int ret = _cursesPINVOKE.mvwprintw(WINDOW.getCPtr(arg0), arg1, arg2, arg3);
    return ret;
  }

  public static int mvwscanw(WINDOW arg0, int arg1, int arg2, string arg3) {
    int ret = _cursesPINVOKE.mvwscanw(WINDOW.getCPtr(arg0), arg1, arg2, arg3);
    return ret;
  }

  public static int mvwvline(WINDOW arg0, int arg1, int arg2, uint arg3, int arg4) {
    int ret = _cursesPINVOKE.mvwvline(WINDOW.getCPtr(arg0), arg1, arg2, arg3, arg4);
    return ret;
  }

  public static int napms(int arg0) {
    int ret = _cursesPINVOKE.napms(arg0);
    return ret;
  }

  public static WINDOW newpad(int arg0, int arg1) {
    global::System.IntPtr cPtr = _cursesPINVOKE.newpad(arg0, arg1);
    WINDOW ret = (cPtr == global::System.IntPtr.Zero) ? null : new WINDOW(cPtr, false);
    return ret;
  }

  public static SCREEN newterm(string arg0, SWIGTYPE_p_FILE arg1, SWIGTYPE_p_FILE arg2) {
    global::System.IntPtr cPtr = _cursesPINVOKE.newterm(arg0, SWIGTYPE_p_FILE.getCPtr(arg1), SWIGTYPE_p_FILE.getCPtr(arg2));
    SCREEN ret = (cPtr == global::System.IntPtr.Zero) ? null : new SCREEN(cPtr, false);
    return ret;
  }

  public static WINDOW newwin(int arg0, int arg1, int arg2, int arg3) {
    global::System.IntPtr cPtr = _cursesPINVOKE.newwin(arg0, arg1, arg2, arg3);
    WINDOW ret = (cPtr == global::System.IntPtr.Zero) ? null : new WINDOW(cPtr, false);
    return ret;
  }

  public static int nl() {
    int ret = _cursesPINVOKE.nl();
    return ret;
  }

  public static int nocbreak() {
    int ret = _cursesPINVOKE.nocbreak();
    return ret;
  }

  public static int nodelay(WINDOW arg0, bool arg1) {
    int ret = _cursesPINVOKE.nodelay(WINDOW.getCPtr(arg0), arg1);
    return ret;
  }

  public static int noecho() {
    int ret = _cursesPINVOKE.noecho();
    return ret;
  }

  public static int nonl() {
    int ret = _cursesPINVOKE.nonl();
    return ret;
  }

  public static void noqiflush() {
    _cursesPINVOKE.noqiflush();
  }

  public static int noraw() {
    int ret = _cursesPINVOKE.noraw();
    return ret;
  }

  public static int notimeout(WINDOW arg0, bool arg1) {
    int ret = _cursesPINVOKE.notimeout(WINDOW.getCPtr(arg0), arg1);
    return ret;
  }

  public static int overlay(WINDOW arg0, WINDOW arg1) {
    int ret = _cursesPINVOKE.overlay(WINDOW.getCPtr(arg0), WINDOW.getCPtr(arg1));
    return ret;
  }

  public static int overwrite(WINDOW arg0, WINDOW arg1) {
    int ret = _cursesPINVOKE.overwrite(WINDOW.getCPtr(arg0), WINDOW.getCPtr(arg1));
    return ret;
  }

  public static int pair_content(short arg0, SWIGTYPE_p_short arg1, SWIGTYPE_p_short arg2) {
    int ret = _cursesPINVOKE.pair_content(arg0, SWIGTYPE_p_short.getCPtr(arg1), SWIGTYPE_p_short.getCPtr(arg2));
    return ret;
  }

  public static int pechochar(WINDOW arg0, uint arg1) {
    int ret = _cursesPINVOKE.pechochar(WINDOW.getCPtr(arg0), arg1);
    return ret;
  }

  public static int pnoutrefresh(WINDOW arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6) {
    int ret = _cursesPINVOKE.pnoutrefresh(WINDOW.getCPtr(arg0), arg1, arg2, arg3, arg4, arg5, arg6);
    return ret;
  }

  public static int prefresh(WINDOW arg0, int arg1, int arg2, int arg3, int arg4, int arg5, int arg6) {
    int ret = _cursesPINVOKE.prefresh(WINDOW.getCPtr(arg0), arg1, arg2, arg3, arg4, arg5, arg6);
    return ret;
  }

  public static int printw(string arg0) {
    int ret = _cursesPINVOKE.printw(arg0);
    return ret;
  }

  public static int putwin(WINDOW arg0, SWIGTYPE_p_FILE arg1) {
    int ret = _cursesPINVOKE.putwin(WINDOW.getCPtr(arg0), SWIGTYPE_p_FILE.getCPtr(arg1));
    return ret;
  }

  public static void qiflush() {
    _cursesPINVOKE.qiflush();
  }

  public static int raw() {
    int ret = _cursesPINVOKE.raw();
    return ret;
  }

  public static int redrawwin(WINDOW arg0) {
    int ret = _cursesPINVOKE.redrawwin(WINDOW.getCPtr(arg0));
    return ret;
  }

  public static int refresh() {
    int ret = _cursesPINVOKE.refresh();
    return ret;
  }

  public static int reset_prog_mode() {
    int ret = _cursesPINVOKE.reset_prog_mode();
    return ret;
  }

  public static int reset_shell_mode() {
    int ret = _cursesPINVOKE.reset_shell_mode();
    return ret;
  }

  public static int resetty() {
    int ret = _cursesPINVOKE.resetty();
    return ret;
  }

  public static int ripoffline(int arg0, SWIGTYPE_p_f_p_struct__win_int__int arg1) {
    int ret = _cursesPINVOKE.ripoffline(arg0, SWIGTYPE_p_f_p_struct__win_int__int.getCPtr(arg1));
    return ret;
  }

  public static int savetty() {
    int ret = _cursesPINVOKE.savetty();
    return ret;
  }

  public static int scanw(string arg0) {
    int ret = _cursesPINVOKE.scanw(arg0);
    return ret;
  }

  public static int scr_dump(string arg0) {
    int ret = _cursesPINVOKE.scr_dump(arg0);
    return ret;
  }

  public static int scr_init(string arg0) {
    int ret = _cursesPINVOKE.scr_init(arg0);
    return ret;
  }

  public static int scr_restore(string arg0) {
    int ret = _cursesPINVOKE.scr_restore(arg0);
    return ret;
  }

  public static int scr_set(string arg0) {
    int ret = _cursesPINVOKE.scr_set(arg0);
    return ret;
  }

  public static int scrl(int arg0) {
    int ret = _cursesPINVOKE.scrl(arg0);
    return ret;
  }

  public static int scroll(WINDOW arg0) {
    int ret = _cursesPINVOKE.scroll(WINDOW.getCPtr(arg0));
    return ret;
  }

  public static int scrollok(WINDOW arg0, bool arg1) {
    int ret = _cursesPINVOKE.scrollok(WINDOW.getCPtr(arg0), arg1);
    return ret;
  }

  public static SCREEN set_term(SCREEN arg0) {
    global::System.IntPtr cPtr = _cursesPINVOKE.set_term(SCREEN.getCPtr(arg0));
    SCREEN ret = (cPtr == global::System.IntPtr.Zero) ? null : new SCREEN(cPtr, false);
    return ret;
  }

  public static int setscrreg(int arg0, int arg1) {
    int ret = _cursesPINVOKE.setscrreg(arg0, arg1);
    return ret;
  }

  public static int slk_attroff(uint arg0) {
    int ret = _cursesPINVOKE.slk_attroff(arg0);
    return ret;
  }

  public static int slk_attr_off(SWIGTYPE_p_attr_t arg0, SWIGTYPE_p_void arg1) {
    int ret = _cursesPINVOKE.slk_attr_off(SWIGTYPE_p_attr_t.getCPtr(arg0), SWIGTYPE_p_void.getCPtr(arg1));
    if (_cursesPINVOKE.SWIGPendingException.Pending) throw _cursesPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int slk_attron(uint arg0) {
    int ret = _cursesPINVOKE.slk_attron(arg0);
    return ret;
  }

  public static int slk_attr_on(SWIGTYPE_p_attr_t arg0, SWIGTYPE_p_void arg1) {
    int ret = _cursesPINVOKE.slk_attr_on(SWIGTYPE_p_attr_t.getCPtr(arg0), SWIGTYPE_p_void.getCPtr(arg1));
    if (_cursesPINVOKE.SWIGPendingException.Pending) throw _cursesPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int slk_attrset(uint arg0) {
    int ret = _cursesPINVOKE.slk_attrset(arg0);
    return ret;
  }

  public static int slk_attr_set(SWIGTYPE_p_attr_t arg0, short arg1, SWIGTYPE_p_void arg2) {
    int ret = _cursesPINVOKE.slk_attr_set(SWIGTYPE_p_attr_t.getCPtr(arg0), arg1, SWIGTYPE_p_void.getCPtr(arg2));
    if (_cursesPINVOKE.SWIGPendingException.Pending) throw _cursesPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int slk_clear() {
    int ret = _cursesPINVOKE.slk_clear();
    return ret;
  }

  public static int slk_color(short arg0) {
    int ret = _cursesPINVOKE.slk_color(arg0);
    return ret;
  }

  public static int slk_init(int arg0) {
    int ret = _cursesPINVOKE.slk_init(arg0);
    return ret;
  }

  public static string slk_label(int arg0) {
    string ret = _cursesPINVOKE.slk_label(arg0);
    return ret;
  }

  public static int slk_noutrefresh() {
    int ret = _cursesPINVOKE.slk_noutrefresh();
    return ret;
  }

  public static int slk_refresh() {
    int ret = _cursesPINVOKE.slk_refresh();
    return ret;
  }

  public static int slk_restore() {
    int ret = _cursesPINVOKE.slk_restore();
    return ret;
  }

  public static int slk_set(int arg0, string arg1, int arg2) {
    int ret = _cursesPINVOKE.slk_set(arg0, arg1, arg2);
    return ret;
  }

  public static int slk_touch() {
    int ret = _cursesPINVOKE.slk_touch();
    return ret;
  }

  public static int standend() {
    int ret = _cursesPINVOKE.standend();
    return ret;
  }

  public static int standout() {
    int ret = _cursesPINVOKE.standout();
    return ret;
  }

  public static int start_color() {
    int ret = _cursesPINVOKE.start_color();
    return ret;
  }

  public static WINDOW subpad(WINDOW arg0, int arg1, int arg2, int arg3, int arg4) {
    global::System.IntPtr cPtr = _cursesPINVOKE.subpad(WINDOW.getCPtr(arg0), arg1, arg2, arg3, arg4);
    WINDOW ret = (cPtr == global::System.IntPtr.Zero) ? null : new WINDOW(cPtr, false);
    return ret;
  }

  public static WINDOW subwin(WINDOW arg0, int arg1, int arg2, int arg3, int arg4) {
    global::System.IntPtr cPtr = _cursesPINVOKE.subwin(WINDOW.getCPtr(arg0), arg1, arg2, arg3, arg4);
    WINDOW ret = (cPtr == global::System.IntPtr.Zero) ? null : new WINDOW(cPtr, false);
    return ret;
  }

  public static int syncok(WINDOW arg0, bool arg1) {
    int ret = _cursesPINVOKE.syncok(WINDOW.getCPtr(arg0), arg1);
    return ret;
  }

  public static uint termattrs() {
    uint ret = _cursesPINVOKE.termattrs();
    return ret;
  }

  public static SWIGTYPE_p_attr_t term_attrs() {
    SWIGTYPE_p_attr_t ret = new SWIGTYPE_p_attr_t(_cursesPINVOKE.term_attrs(), true);
    return ret;
  }

  public static string termname() {
    string ret = _cursesPINVOKE.termname();
    return ret;
  }

  public static void timeout(int arg0) {
    _cursesPINVOKE.timeout(arg0);
  }

  public static int touchline(WINDOW arg0, int arg1, int arg2) {
    int ret = _cursesPINVOKE.touchline(WINDOW.getCPtr(arg0), arg1, arg2);
    return ret;
  }

  public static int touchwin(WINDOW arg0) {
    int ret = _cursesPINVOKE.touchwin(WINDOW.getCPtr(arg0));
    return ret;
  }

  public static int typeahead(int arg0) {
    int ret = _cursesPINVOKE.typeahead(arg0);
    return ret;
  }

  public static int untouchwin(WINDOW arg0) {
    int ret = _cursesPINVOKE.untouchwin(WINDOW.getCPtr(arg0));
    return ret;
  }

  public static void use_env(bool arg0) {
    _cursesPINVOKE.use_env(arg0);
  }

  public static int vidattr(uint arg0) {
    int ret = _cursesPINVOKE.vidattr(arg0);
    return ret;
  }

  public static int vid_attr(SWIGTYPE_p_attr_t arg0, short arg1, SWIGTYPE_p_void arg2) {
    int ret = _cursesPINVOKE.vid_attr(SWIGTYPE_p_attr_t.getCPtr(arg0), arg1, SWIGTYPE_p_void.getCPtr(arg2));
    if (_cursesPINVOKE.SWIGPendingException.Pending) throw _cursesPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int vidputs(uint arg0, SWIGTYPE_p_f_int__int arg1) {
    int ret = _cursesPINVOKE.vidputs(arg0, SWIGTYPE_p_f_int__int.getCPtr(arg1));
    return ret;
  }

  public static int vid_puts(SWIGTYPE_p_attr_t arg0, short arg1, SWIGTYPE_p_void arg2, SWIGTYPE_p_f_int__int arg3) {
    int ret = _cursesPINVOKE.vid_puts(SWIGTYPE_p_attr_t.getCPtr(arg0), arg1, SWIGTYPE_p_void.getCPtr(arg2), SWIGTYPE_p_f_int__int.getCPtr(arg3));
    if (_cursesPINVOKE.SWIGPendingException.Pending) throw _cursesPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int vline(uint arg0, int arg1) {
    int ret = _cursesPINVOKE.vline(arg0, arg1);
    return ret;
  }

  public static int vw_printw(WINDOW arg0, string arg1, SWIGTYPE_p_va_list arg2) {
    int ret = _cursesPINVOKE.vw_printw(WINDOW.getCPtr(arg0), arg1, SWIGTYPE_p_va_list.getCPtr(arg2));
    if (_cursesPINVOKE.SWIGPendingException.Pending) throw _cursesPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int vwprintw(WINDOW arg0, string arg1, SWIGTYPE_p_va_list arg2) {
    int ret = _cursesPINVOKE.vwprintw(WINDOW.getCPtr(arg0), arg1, SWIGTYPE_p_va_list.getCPtr(arg2));
    if (_cursesPINVOKE.SWIGPendingException.Pending) throw _cursesPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int vw_scanw(WINDOW arg0, string arg1, SWIGTYPE_p_va_list arg2) {
    int ret = _cursesPINVOKE.vw_scanw(WINDOW.getCPtr(arg0), arg1, SWIGTYPE_p_va_list.getCPtr(arg2));
    if (_cursesPINVOKE.SWIGPendingException.Pending) throw _cursesPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int vwscanw(WINDOW arg0, string arg1, SWIGTYPE_p_va_list arg2) {
    int ret = _cursesPINVOKE.vwscanw(WINDOW.getCPtr(arg0), arg1, SWIGTYPE_p_va_list.getCPtr(arg2));
    if (_cursesPINVOKE.SWIGPendingException.Pending) throw _cursesPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int waddchnstr(WINDOW arg0, SWIGTYPE_p_unsigned_long arg1, int arg2) {
    int ret = _cursesPINVOKE.waddchnstr(WINDOW.getCPtr(arg0), SWIGTYPE_p_unsigned_long.getCPtr(arg1), arg2);
    return ret;
  }

  public static int waddchstr(WINDOW arg0, SWIGTYPE_p_unsigned_long arg1) {
    int ret = _cursesPINVOKE.waddchstr(WINDOW.getCPtr(arg0), SWIGTYPE_p_unsigned_long.getCPtr(arg1));
    return ret;
  }

  public static int waddch(WINDOW arg0, uint arg1) {
    int ret = _cursesPINVOKE.waddch(WINDOW.getCPtr(arg0), arg1);
    return ret;
  }

  public static int waddnstr(WINDOW arg0, string arg1, int arg2) {
    int ret = _cursesPINVOKE.waddnstr(WINDOW.getCPtr(arg0), arg1, arg2);
    return ret;
  }

  public static int waddstr(WINDOW arg0, string arg1) {
    int ret = _cursesPINVOKE.waddstr(WINDOW.getCPtr(arg0), arg1);
    return ret;
  }

  public static int wattroff(WINDOW arg0, uint arg1) {
    int ret = _cursesPINVOKE.wattroff(WINDOW.getCPtr(arg0), arg1);
    return ret;
  }

  public static int wattron(WINDOW arg0, uint arg1) {
    int ret = _cursesPINVOKE.wattron(WINDOW.getCPtr(arg0), arg1);
    return ret;
  }

  public static int wattrset(WINDOW arg0, uint arg1) {
    int ret = _cursesPINVOKE.wattrset(WINDOW.getCPtr(arg0), arg1);
    return ret;
  }

  public static int wattr_get(WINDOW arg0, SWIGTYPE_p_attr_t arg1, SWIGTYPE_p_short arg2, SWIGTYPE_p_void arg3) {
    int ret = _cursesPINVOKE.wattr_get(WINDOW.getCPtr(arg0), SWIGTYPE_p_attr_t.getCPtr(arg1), SWIGTYPE_p_short.getCPtr(arg2), SWIGTYPE_p_void.getCPtr(arg3));
    return ret;
  }

  public static int wattr_off(WINDOW arg0, SWIGTYPE_p_attr_t arg1, SWIGTYPE_p_void arg2) {
    int ret = _cursesPINVOKE.wattr_off(WINDOW.getCPtr(arg0), SWIGTYPE_p_attr_t.getCPtr(arg1), SWIGTYPE_p_void.getCPtr(arg2));
    if (_cursesPINVOKE.SWIGPendingException.Pending) throw _cursesPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int wattr_on(WINDOW arg0, SWIGTYPE_p_attr_t arg1, SWIGTYPE_p_void arg2) {
    int ret = _cursesPINVOKE.wattr_on(WINDOW.getCPtr(arg0), SWIGTYPE_p_attr_t.getCPtr(arg1), SWIGTYPE_p_void.getCPtr(arg2));
    if (_cursesPINVOKE.SWIGPendingException.Pending) throw _cursesPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int wattr_set(WINDOW arg0, SWIGTYPE_p_attr_t arg1, short arg2, SWIGTYPE_p_void arg3) {
    int ret = _cursesPINVOKE.wattr_set(WINDOW.getCPtr(arg0), SWIGTYPE_p_attr_t.getCPtr(arg1), arg2, SWIGTYPE_p_void.getCPtr(arg3));
    if (_cursesPINVOKE.SWIGPendingException.Pending) throw _cursesPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static void wbkgdset(WINDOW arg0, uint arg1) {
    _cursesPINVOKE.wbkgdset(WINDOW.getCPtr(arg0), arg1);
  }

  public static int wbkgd(WINDOW arg0, uint arg1) {
    int ret = _cursesPINVOKE.wbkgd(WINDOW.getCPtr(arg0), arg1);
    return ret;
  }

  public static int wborder(WINDOW arg0, uint arg1, uint arg2, uint arg3, uint arg4, uint arg5, uint arg6, uint arg7, uint arg8) {
    int ret = _cursesPINVOKE.wborder(WINDOW.getCPtr(arg0), arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8);
    return ret;
  }

  public static int wchgat(WINDOW arg0, int arg1, SWIGTYPE_p_attr_t arg2, short arg3, SWIGTYPE_p_void arg4) {
    int ret = _cursesPINVOKE.wchgat(WINDOW.getCPtr(arg0), arg1, SWIGTYPE_p_attr_t.getCPtr(arg2), arg3, SWIGTYPE_p_void.getCPtr(arg4));
    if (_cursesPINVOKE.SWIGPendingException.Pending) throw _cursesPINVOKE.SWIGPendingException.Retrieve();
    return ret;
  }

  public static int wclear(WINDOW arg0) {
    int ret = _cursesPINVOKE.wclear(WINDOW.getCPtr(arg0));
    return ret;
  }

  public static int wclrtobot(WINDOW arg0) {
    int ret = _cursesPINVOKE.wclrtobot(WINDOW.getCPtr(arg0));
    return ret;
  }

  public static int wclrtoeol(WINDOW arg0) {
    int ret = _cursesPINVOKE.wclrtoeol(WINDOW.getCPtr(arg0));
    return ret;
  }

  public static int wcolor_set(WINDOW arg0, short arg1, SWIGTYPE_p_void arg2) {
    int ret = _cursesPINVOKE.wcolor_set(WINDOW.getCPtr(arg0), arg1, SWIGTYPE_p_void.getCPtr(arg2));
    return ret;
  }

  public static void wcursyncup(WINDOW arg0) {
    _cursesPINVOKE.wcursyncup(WINDOW.getCPtr(arg0));
  }

  public static int wdelch(WINDOW arg0) {
    int ret = _cursesPINVOKE.wdelch(WINDOW.getCPtr(arg0));
    return ret;
  }

  public static int wdeleteln(WINDOW arg0) {
    int ret = _cursesPINVOKE.wdeleteln(WINDOW.getCPtr(arg0));
    return ret;
  }

  public static int wechochar(WINDOW arg0, uint arg1) {
    int ret = _cursesPINVOKE.wechochar(WINDOW.getCPtr(arg0), arg1);
    return ret;
  }

  public static int werase(WINDOW arg0) {
    int ret = _cursesPINVOKE.werase(WINDOW.getCPtr(arg0));
    return ret;
  }

  public static int wgetch(WINDOW arg0) {
    int ret = _cursesPINVOKE.wgetch(WINDOW.getCPtr(arg0));
    return ret;
  }

  public static int wgetnstr(WINDOW arg0, string arg1, int arg2) {
    int ret = _cursesPINVOKE.wgetnstr(WINDOW.getCPtr(arg0), arg1, arg2);
    return ret;
  }

  public static int wgetstr(WINDOW arg0, string arg1) {
    int ret = _cursesPINVOKE.wgetstr(WINDOW.getCPtr(arg0), arg1);
    return ret;
  }

  public static int whline(WINDOW arg0, uint arg1, int arg2) {
    int ret = _cursesPINVOKE.whline(WINDOW.getCPtr(arg0), arg1, arg2);
    return ret;
  }

  public static int winchnstr(WINDOW arg0, SWIGTYPE_p_unsigned_long arg1, int arg2) {
    int ret = _cursesPINVOKE.winchnstr(WINDOW.getCPtr(arg0), SWIGTYPE_p_unsigned_long.getCPtr(arg1), arg2);
    return ret;
  }

  public static int winchstr(WINDOW arg0, SWIGTYPE_p_unsigned_long arg1) {
    int ret = _cursesPINVOKE.winchstr(WINDOW.getCPtr(arg0), SWIGTYPE_p_unsigned_long.getCPtr(arg1));
    return ret;
  }

  public static uint winch(WINDOW arg0) {
    uint ret = _cursesPINVOKE.winch(WINDOW.getCPtr(arg0));
    return ret;
  }

  public static int winnstr(WINDOW arg0, string arg1, int arg2) {
    int ret = _cursesPINVOKE.winnstr(WINDOW.getCPtr(arg0), arg1, arg2);
    return ret;
  }

  public static int winsch(WINDOW arg0, uint arg1) {
    int ret = _cursesPINVOKE.winsch(WINDOW.getCPtr(arg0), arg1);
    return ret;
  }

  public static int winsdelln(WINDOW arg0, int arg1) {
    int ret = _cursesPINVOKE.winsdelln(WINDOW.getCPtr(arg0), arg1);
    return ret;
  }

  public static int winsertln(WINDOW arg0) {
    int ret = _cursesPINVOKE.winsertln(WINDOW.getCPtr(arg0));
    return ret;
  }

  public static int winsnstr(WINDOW arg0, string arg1, int arg2) {
    int ret = _cursesPINVOKE.winsnstr(WINDOW.getCPtr(arg0), arg1, arg2);
    return ret;
  }

  public static int winsstr(WINDOW arg0, string arg1) {
    int ret = _cursesPINVOKE.winsstr(WINDOW.getCPtr(arg0), arg1);
    return ret;
  }

  public static int winstr(WINDOW arg0, string arg1) {
    int ret = _cursesPINVOKE.winstr(WINDOW.getCPtr(arg0), arg1);
    return ret;
  }

  public static int wmove(WINDOW arg0, int arg1, int arg2) {
    int ret = _cursesPINVOKE.wmove(WINDOW.getCPtr(arg0), arg1, arg2);
    return ret;
  }

  public static int wnoutrefresh(WINDOW arg0) {
    int ret = _cursesPINVOKE.wnoutrefresh(WINDOW.getCPtr(arg0));
    return ret;
  }

  public static int wprintw(WINDOW arg0, string arg1) {
    int ret = _cursesPINVOKE.wprintw(WINDOW.getCPtr(arg0), arg1);
    return ret;
  }

  public static int wredrawln(WINDOW arg0, int arg1, int arg2) {
    int ret = _cursesPINVOKE.wredrawln(WINDOW.getCPtr(arg0), arg1, arg2);
    return ret;
  }

  public static int wrefresh(WINDOW arg0) {
    int ret = _cursesPINVOKE.wrefresh(WINDOW.getCPtr(arg0));
    return ret;
  }

  public static int wscanw(WINDOW arg0, string arg1) {
    int ret = _cursesPINVOKE.wscanw(WINDOW.getCPtr(arg0), arg1);
    return ret;
  }

  public static int wscrl(WINDOW arg0, int arg1) {
    int ret = _cursesPINVOKE.wscrl(WINDOW.getCPtr(arg0), arg1);
    return ret;
  }

  public static int wsetscrreg(WINDOW arg0, int arg1, int arg2) {
    int ret = _cursesPINVOKE.wsetscrreg(WINDOW.getCPtr(arg0), arg1, arg2);
    return ret;
  }

  public static int wstandend(WINDOW arg0) {
    int ret = _cursesPINVOKE.wstandend(WINDOW.getCPtr(arg0));
    return ret;
  }

  public static int wstandout(WINDOW arg0) {
    int ret = _cursesPINVOKE.wstandout(WINDOW.getCPtr(arg0));
    return ret;
  }

  public static void wsyncdown(WINDOW arg0) {
    _cursesPINVOKE.wsyncdown(WINDOW.getCPtr(arg0));
  }

  public static void wsyncup(WINDOW arg0) {
    _cursesPINVOKE.wsyncup(WINDOW.getCPtr(arg0));
  }

  public static void wtimeout(WINDOW arg0, int arg1) {
    _cursesPINVOKE.wtimeout(WINDOW.getCPtr(arg0), arg1);
  }

  public static int wtouchln(WINDOW arg0, int arg1, int arg2, int arg3) {
    int ret = _cursesPINVOKE.wtouchln(WINDOW.getCPtr(arg0), arg1, arg2, arg3);
    return ret;
  }

  public static int wvline(WINDOW arg0, uint arg1, int arg2) {
    int ret = _cursesPINVOKE.wvline(WINDOW.getCPtr(arg0), arg1, arg2);
    return ret;
  }

  public static void GetYX(WINDOW arg0, SWIGTYPE_p_int arg1, SWIGTYPE_p_int arg2) {
    _cursesPINVOKE.GetYX(WINDOW.getCPtr(arg0), SWIGTYPE_p_int.getCPtr(arg1), SWIGTYPE_p_int.getCPtr(arg2));
  }

  public static void GetMaxYX(WINDOW arg0, SWIGTYPE_p_int arg1, SWIGTYPE_p_int arg2) {
    _cursesPINVOKE.GetMaxYX(WINDOW.getCPtr(arg0), SWIGTYPE_p_int.getCPtr(arg1), SWIGTYPE_p_int.getCPtr(arg2));
  }

  public static void GetBegYX(WINDOW arg0, SWIGTYPE_p_int arg1, SWIGTYPE_p_int arg2) {
    _cursesPINVOKE.GetBegYX(WINDOW.getCPtr(arg0), SWIGTYPE_p_int.getCPtr(arg1), SWIGTYPE_p_int.getCPtr(arg2));
  }

  public static readonly int __PDCURSES__ = _cursesPINVOKE.__PDCURSES___get();
  public static readonly int PDC_BUILD = _cursesPINVOKE.PDC_BUILD_get();
  public static readonly int PDCURSES = _cursesPINVOKE.PDCURSES_get();
  public static readonly int XOPEN = _cursesPINVOKE.XOPEN_get();
  public static readonly int SYSVcurses = _cursesPINVOKE.SYSVcurses_get();
  public static readonly int BSDcurses = _cursesPINVOKE.BSDcurses_get();
  public static readonly int PDC_WIDE = _cursesPINVOKE.PDC_WIDE_get();
  public static readonly int CHTYPE_32 = _cursesPINVOKE.CHTYPE_32_get();
  public static readonly int CHTYPE_LONG = _cursesPINVOKE.CHTYPE_LONG_get();
  public static readonly int PDC_MAX_MOUSE_BUTTONS = _cursesPINVOKE.PDC_MAX_MOUSE_BUTTONS_get();
  public static readonly int PDC_N_EXTENDED_MOUSE_BUTTONS = _cursesPINVOKE.PDC_N_EXTENDED_MOUSE_BUTTONS_get();
  public static readonly int BUTTON_RELEASED = _cursesPINVOKE.BUTTON_RELEASED_get();
  public static readonly int BUTTON_PRESSED = _cursesPINVOKE.BUTTON_PRESSED_get();
  public static readonly int BUTTON_CLICKED = _cursesPINVOKE.BUTTON_CLICKED_get();
  public static readonly int BUTTON_DOUBLE_CLICKED = _cursesPINVOKE.BUTTON_DOUBLE_CLICKED_get();
  public static readonly int BUTTON_TRIPLE_CLICKED = _cursesPINVOKE.BUTTON_TRIPLE_CLICKED_get();
  public static readonly int BUTTON_MOVED = _cursesPINVOKE.BUTTON_MOVED_get();
  public static readonly int WHEEL_SCROLLED = _cursesPINVOKE.WHEEL_SCROLLED_get();
  public static readonly int BUTTON_ACTION_MASK = _cursesPINVOKE.BUTTON_ACTION_MASK_get();
  public static readonly int PDC_BUTTON_SHIFT = _cursesPINVOKE.PDC_BUTTON_SHIFT_get();
  public static readonly int PDC_BUTTON_CONTROL = _cursesPINVOKE.PDC_BUTTON_CONTROL_get();
  public static readonly int PDC_BUTTON_ALT = _cursesPINVOKE.PDC_BUTTON_ALT_get();
  public static readonly int BUTTON_MODIFIER_MASK = _cursesPINVOKE.BUTTON_MODIFIER_MASK_get();
  public static readonly int PDC_MOUSE_MOVED = _cursesPINVOKE.PDC_MOUSE_MOVED_get();
  public static readonly int PDC_MOUSE_POSITION = _cursesPINVOKE.PDC_MOUSE_POSITION_get();
  public static readonly int PDC_MOUSE_WHEEL_UP = _cursesPINVOKE.PDC_MOUSE_WHEEL_UP_get();
  public static readonly int PDC_MOUSE_WHEEL_DOWN = _cursesPINVOKE.PDC_MOUSE_WHEEL_DOWN_get();
  public static readonly int PDC_MOUSE_WHEEL_LEFT = _cursesPINVOKE.PDC_MOUSE_WHEEL_LEFT_get();
  public static readonly int PDC_MOUSE_WHEEL_RIGHT = _cursesPINVOKE.PDC_MOUSE_WHEEL_RIGHT_get();
  public static readonly int BUTTON1_RELEASED = _cursesPINVOKE.BUTTON1_RELEASED_get();
  public static readonly int BUTTON1_PRESSED = _cursesPINVOKE.BUTTON1_PRESSED_get();
  public static readonly int BUTTON1_CLICKED = _cursesPINVOKE.BUTTON1_CLICKED_get();
  public static readonly int BUTTON1_DOUBLE_CLICKED = _cursesPINVOKE.BUTTON1_DOUBLE_CLICKED_get();
  public static readonly int BUTTON1_TRIPLE_CLICKED = _cursesPINVOKE.BUTTON1_TRIPLE_CLICKED_get();
  public static readonly int BUTTON1_MOVED = _cursesPINVOKE.BUTTON1_MOVED_get();
  public static readonly int BUTTON2_RELEASED = _cursesPINVOKE.BUTTON2_RELEASED_get();
  public static readonly int BUTTON2_PRESSED = _cursesPINVOKE.BUTTON2_PRESSED_get();
  public static readonly int BUTTON2_CLICKED = _cursesPINVOKE.BUTTON2_CLICKED_get();
  public static readonly int BUTTON2_DOUBLE_CLICKED = _cursesPINVOKE.BUTTON2_DOUBLE_CLICKED_get();
  public static readonly int BUTTON2_TRIPLE_CLICKED = _cursesPINVOKE.BUTTON2_TRIPLE_CLICKED_get();
  public static readonly int BUTTON2_MOVED = _cursesPINVOKE.BUTTON2_MOVED_get();
  public static readonly int BUTTON3_RELEASED = _cursesPINVOKE.BUTTON3_RELEASED_get();
  public static readonly int BUTTON3_PRESSED = _cursesPINVOKE.BUTTON3_PRESSED_get();
  public static readonly int BUTTON3_CLICKED = _cursesPINVOKE.BUTTON3_CLICKED_get();
  public static readonly int BUTTON3_DOUBLE_CLICKED = _cursesPINVOKE.BUTTON3_DOUBLE_CLICKED_get();
  public static readonly int BUTTON3_TRIPLE_CLICKED = _cursesPINVOKE.BUTTON3_TRIPLE_CLICKED_get();
  public static readonly int BUTTON3_MOVED = _cursesPINVOKE.BUTTON3_MOVED_get();
  public static readonly int BUTTON4_RELEASED = _cursesPINVOKE.BUTTON4_RELEASED_get();
  public static readonly int BUTTON4_PRESSED = _cursesPINVOKE.BUTTON4_PRESSED_get();
  public static readonly int BUTTON4_CLICKED = _cursesPINVOKE.BUTTON4_CLICKED_get();
  public static readonly int BUTTON4_DOUBLE_CLICKED = _cursesPINVOKE.BUTTON4_DOUBLE_CLICKED_get();
  public static readonly int BUTTON4_TRIPLE_CLICKED = _cursesPINVOKE.BUTTON4_TRIPLE_CLICKED_get();
  public static readonly int BUTTON5_RELEASED = _cursesPINVOKE.BUTTON5_RELEASED_get();
  public static readonly int BUTTON5_PRESSED = _cursesPINVOKE.BUTTON5_PRESSED_get();
  public static readonly int BUTTON5_CLICKED = _cursesPINVOKE.BUTTON5_CLICKED_get();
  public static readonly int BUTTON5_DOUBLE_CLICKED = _cursesPINVOKE.BUTTON5_DOUBLE_CLICKED_get();
  public static readonly int BUTTON5_TRIPLE_CLICKED = _cursesPINVOKE.BUTTON5_TRIPLE_CLICKED_get();
  public static readonly int MOUSE_WHEEL_SCROLL = _cursesPINVOKE.MOUSE_WHEEL_SCROLL_get();
  public static readonly int BUTTON_MODIFIER_SHIFT = _cursesPINVOKE.BUTTON_MODIFIER_SHIFT_get();
  public static readonly int BUTTON_MODIFIER_CONTROL = _cursesPINVOKE.BUTTON_MODIFIER_CONTROL_get();
  public static readonly int BUTTON_MODIFIER_ALT = _cursesPINVOKE.BUTTON_MODIFIER_ALT_get();
  public static readonly int ALL_MOUSE_EVENTS = _cursesPINVOKE.ALL_MOUSE_EVENTS_get();
  public static readonly int REPORT_MOUSE_POSITION = _cursesPINVOKE.REPORT_MOUSE_POSITION_get();
  public static readonly int BUTTON_SHIFT = _cursesPINVOKE.BUTTON_SHIFT_get();
  public static readonly int BUTTON_CONTROL = _cursesPINVOKE.BUTTON_CONTROL_get();
  public static readonly int BUTTON_ALT = _cursesPINVOKE.BUTTON_ALT_get();
  public static readonly int A_NORMAL = _cursesPINVOKE.A_NORMAL_get();
  public static readonly int A_OVERLINE = _cursesPINVOKE.A_OVERLINE_get();
  public static readonly int A_STRIKEOUT = _cursesPINVOKE.A_STRIKEOUT_get();
  public static readonly int A_ATTRIBUTES = _cursesPINVOKE.A_ATTRIBUTES_get();
  public static readonly int A_ALTCHARSET = _cursesPINVOKE.A_ALTCHARSET_get();
  public static readonly int A_RIGHTLINE = _cursesPINVOKE.A_RIGHTLINE_get();
  public static readonly int A_LEFTLINE = _cursesPINVOKE.A_LEFTLINE_get();
  public static readonly int A_INVIS = _cursesPINVOKE.A_INVIS_get();
  public static readonly int A_UNDERLINE = _cursesPINVOKE.A_UNDERLINE_get();
  public static readonly int A_REVERSE = _cursesPINVOKE.A_REVERSE_get();
  public static readonly int A_BLINK = _cursesPINVOKE.A_BLINK_get();
  public static readonly int A_BOLD = _cursesPINVOKE.A_BOLD_get();
  public static readonly int A_CHARTEXT = _cursesPINVOKE.A_CHARTEXT_get();
  public static readonly int A_COLOR = _cursesPINVOKE.A_COLOR_get();
  public static readonly int A_RGB_COLOR = _cursesPINVOKE.A_RGB_COLOR_get();
  public static readonly int A_DIM = _cursesPINVOKE.A_DIM_get();
  public static readonly int PDC_COLOR_SHIFT = _cursesPINVOKE.PDC_COLOR_SHIFT_get();
  public static readonly int A_STANDOUT = _cursesPINVOKE.A_STANDOUT_get();
  public static readonly int CHR_MSK = _cursesPINVOKE.CHR_MSK_get();
  public static readonly int ATR_MSK = _cursesPINVOKE.ATR_MSK_get();
  public static readonly int ATR_NRM = _cursesPINVOKE.ATR_NRM_get();
  public static readonly int WA_NORMAL = _cursesPINVOKE.WA_NORMAL_get();
  public static readonly int WA_ALTCHARSET = _cursesPINVOKE.WA_ALTCHARSET_get();
  public static readonly int WA_BLINK = _cursesPINVOKE.WA_BLINK_get();
  public static readonly int WA_BOLD = _cursesPINVOKE.WA_BOLD_get();
  public static readonly int WA_DIM = _cursesPINVOKE.WA_DIM_get();
  public static readonly int WA_INVIS = _cursesPINVOKE.WA_INVIS_get();
  public static readonly int WA_LEFT = _cursesPINVOKE.WA_LEFT_get();
  public static readonly int WA_REVERSE = _cursesPINVOKE.WA_REVERSE_get();
  public static readonly int WA_RIGHT = _cursesPINVOKE.WA_RIGHT_get();
  public static readonly int WA_STANDOUT = _cursesPINVOKE.WA_STANDOUT_get();
  public static readonly int WA_UNDERLINE = _cursesPINVOKE.WA_UNDERLINE_get();
  public static readonly int WA_HORIZONTAL = _cursesPINVOKE.WA_HORIZONTAL_get();
  public static readonly int WA_LOW = _cursesPINVOKE.WA_LOW_get();
  public static readonly int WA_TOP = _cursesPINVOKE.WA_TOP_get();
  public static readonly int WA_VERTICAL = _cursesPINVOKE.WA_VERTICAL_get();
  public static readonly int WA_ATTRIBUTES = _cursesPINVOKE.WA_ATTRIBUTES_get();
  public static readonly int COLOR_BLACK = _cursesPINVOKE.COLOR_BLACK_get();
  public static readonly int COLOR_BLUE = _cursesPINVOKE.COLOR_BLUE_get();
  public static readonly int COLOR_GREEN = _cursesPINVOKE.COLOR_GREEN_get();
  public static readonly int COLOR_RED = _cursesPINVOKE.COLOR_RED_get();
  public static readonly int COLOR_CYAN = _cursesPINVOKE.COLOR_CYAN_get();
  public static readonly int COLOR_MAGENTA = _cursesPINVOKE.COLOR_MAGENTA_get();
  public static readonly int COLOR_YELLOW = _cursesPINVOKE.COLOR_YELLOW_get();
  public static readonly int COLOR_WHITE = _cursesPINVOKE.COLOR_WHITE_get();
  public static readonly int KEY_OFFSET = _cursesPINVOKE.KEY_OFFSET_get();
  public static readonly int KEY_CODE_YES = _cursesPINVOKE.KEY_CODE_YES_get();
  public static readonly int KEY_BREAK = _cursesPINVOKE.KEY_BREAK_get();
  public static readonly int KEY_DOWN = _cursesPINVOKE.KEY_DOWN_get();
  public static readonly int KEY_UP = _cursesPINVOKE.KEY_UP_get();
  public static readonly int KEY_LEFT = _cursesPINVOKE.KEY_LEFT_get();
  public static readonly int KEY_RIGHT = _cursesPINVOKE.KEY_RIGHT_get();
  public static readonly int KEY_HOME = _cursesPINVOKE.KEY_HOME_get();
  public static readonly int KEY_BACKSPACE = _cursesPINVOKE.KEY_BACKSPACE_get();
  public static readonly int KEY_F0 = _cursesPINVOKE.KEY_F0_get();
  public static readonly int KEY_DL = _cursesPINVOKE.KEY_DL_get();
  public static readonly int KEY_IL = _cursesPINVOKE.KEY_IL_get();
  public static readonly int KEY_DC = _cursesPINVOKE.KEY_DC_get();
  public static readonly int KEY_IC = _cursesPINVOKE.KEY_IC_get();
  public static readonly int KEY_EIC = _cursesPINVOKE.KEY_EIC_get();
  public static readonly int KEY_CLEAR = _cursesPINVOKE.KEY_CLEAR_get();
  public static readonly int KEY_EOS = _cursesPINVOKE.KEY_EOS_get();
  public static readonly int KEY_EOL = _cursesPINVOKE.KEY_EOL_get();
  public static readonly int KEY_SF = _cursesPINVOKE.KEY_SF_get();
  public static readonly int KEY_SR = _cursesPINVOKE.KEY_SR_get();
  public static readonly int KEY_NPAGE = _cursesPINVOKE.KEY_NPAGE_get();
  public static readonly int KEY_PPAGE = _cursesPINVOKE.KEY_PPAGE_get();
  public static readonly int KEY_STAB = _cursesPINVOKE.KEY_STAB_get();
  public static readonly int KEY_CTAB = _cursesPINVOKE.KEY_CTAB_get();
  public static readonly int KEY_CATAB = _cursesPINVOKE.KEY_CATAB_get();
  public static readonly int KEY_ENTER = _cursesPINVOKE.KEY_ENTER_get();
  public static readonly int KEY_SRESET = _cursesPINVOKE.KEY_SRESET_get();
  public static readonly int KEY_RESET = _cursesPINVOKE.KEY_RESET_get();
  public static readonly int KEY_PRINT = _cursesPINVOKE.KEY_PRINT_get();
  public static readonly int KEY_LL = _cursesPINVOKE.KEY_LL_get();
  public static readonly int KEY_ABORT = _cursesPINVOKE.KEY_ABORT_get();
  public static readonly int KEY_SHELP = _cursesPINVOKE.KEY_SHELP_get();
  public static readonly int KEY_LHELP = _cursesPINVOKE.KEY_LHELP_get();
  public static readonly int KEY_BTAB = _cursesPINVOKE.KEY_BTAB_get();
  public static readonly int KEY_BEG = _cursesPINVOKE.KEY_BEG_get();
  public static readonly int KEY_CANCEL = _cursesPINVOKE.KEY_CANCEL_get();
  public static readonly int KEY_CLOSE = _cursesPINVOKE.KEY_CLOSE_get();
  public static readonly int KEY_COMMAND = _cursesPINVOKE.KEY_COMMAND_get();
  public static readonly int KEY_COPY = _cursesPINVOKE.KEY_COPY_get();
  public static readonly int KEY_CREATE = _cursesPINVOKE.KEY_CREATE_get();
  public static readonly int KEY_END = _cursesPINVOKE.KEY_END_get();
  public static readonly int KEY_EXIT = _cursesPINVOKE.KEY_EXIT_get();
  public static readonly int KEY_FIND = _cursesPINVOKE.KEY_FIND_get();
  public static readonly int KEY_HELP = _cursesPINVOKE.KEY_HELP_get();
  public static readonly int KEY_MARK = _cursesPINVOKE.KEY_MARK_get();
  public static readonly int KEY_MESSAGE = _cursesPINVOKE.KEY_MESSAGE_get();
  public static readonly int KEY_MOVE = _cursesPINVOKE.KEY_MOVE_get();
  public static readonly int KEY_NEXT = _cursesPINVOKE.KEY_NEXT_get();
  public static readonly int KEY_OPEN = _cursesPINVOKE.KEY_OPEN_get();
  public static readonly int KEY_OPTIONS = _cursesPINVOKE.KEY_OPTIONS_get();
  public static readonly int KEY_PREVIOUS = _cursesPINVOKE.KEY_PREVIOUS_get();
  public static readonly int KEY_REDO = _cursesPINVOKE.KEY_REDO_get();
  public static readonly int KEY_REFERENCE = _cursesPINVOKE.KEY_REFERENCE_get();
  public static readonly int KEY_REFRESH = _cursesPINVOKE.KEY_REFRESH_get();
  public static readonly int KEY_REPLACE = _cursesPINVOKE.KEY_REPLACE_get();
  public static readonly int KEY_RESTART = _cursesPINVOKE.KEY_RESTART_get();
  public static readonly int KEY_RESUME = _cursesPINVOKE.KEY_RESUME_get();
  public static readonly int KEY_SAVE = _cursesPINVOKE.KEY_SAVE_get();
  public static readonly int KEY_SBEG = _cursesPINVOKE.KEY_SBEG_get();
  public static readonly int KEY_SCANCEL = _cursesPINVOKE.KEY_SCANCEL_get();
  public static readonly int KEY_SCOMMAND = _cursesPINVOKE.KEY_SCOMMAND_get();
  public static readonly int KEY_SCOPY = _cursesPINVOKE.KEY_SCOPY_get();
  public static readonly int KEY_SCREATE = _cursesPINVOKE.KEY_SCREATE_get();
  public static readonly int KEY_SDC = _cursesPINVOKE.KEY_SDC_get();
  public static readonly int KEY_SDL = _cursesPINVOKE.KEY_SDL_get();
  public static readonly int KEY_SELECT = _cursesPINVOKE.KEY_SELECT_get();
  public static readonly int KEY_SEND = _cursesPINVOKE.KEY_SEND_get();
  public static readonly int KEY_SEOL = _cursesPINVOKE.KEY_SEOL_get();
  public static readonly int KEY_SEXIT = _cursesPINVOKE.KEY_SEXIT_get();
  public static readonly int KEY_SFIND = _cursesPINVOKE.KEY_SFIND_get();
  public static readonly int KEY_SHOME = _cursesPINVOKE.KEY_SHOME_get();
  public static readonly int KEY_SIC = _cursesPINVOKE.KEY_SIC_get();
  public static readonly int KEY_SLEFT = _cursesPINVOKE.KEY_SLEFT_get();
  public static readonly int KEY_SMESSAGE = _cursesPINVOKE.KEY_SMESSAGE_get();
  public static readonly int KEY_SMOVE = _cursesPINVOKE.KEY_SMOVE_get();
  public static readonly int KEY_SNEXT = _cursesPINVOKE.KEY_SNEXT_get();
  public static readonly int KEY_SOPTIONS = _cursesPINVOKE.KEY_SOPTIONS_get();
  public static readonly int KEY_SPREVIOUS = _cursesPINVOKE.KEY_SPREVIOUS_get();
  public static readonly int KEY_SPRINT = _cursesPINVOKE.KEY_SPRINT_get();
  public static readonly int KEY_SREDO = _cursesPINVOKE.KEY_SREDO_get();
  public static readonly int KEY_SREPLACE = _cursesPINVOKE.KEY_SREPLACE_get();
  public static readonly int KEY_SRIGHT = _cursesPINVOKE.KEY_SRIGHT_get();
  public static readonly int KEY_SRSUME = _cursesPINVOKE.KEY_SRSUME_get();
  public static readonly int KEY_SSAVE = _cursesPINVOKE.KEY_SSAVE_get();
  public static readonly int KEY_SSUSPEND = _cursesPINVOKE.KEY_SSUSPEND_get();
  public static readonly int KEY_SUNDO = _cursesPINVOKE.KEY_SUNDO_get();
  public static readonly int KEY_SUSPEND = _cursesPINVOKE.KEY_SUSPEND_get();
  public static readonly int KEY_UNDO = _cursesPINVOKE.KEY_UNDO_get();
  public static readonly int ALT_0 = _cursesPINVOKE.ALT_0_get();
  public static readonly int ALT_1 = _cursesPINVOKE.ALT_1_get();
  public static readonly int ALT_2 = _cursesPINVOKE.ALT_2_get();
  public static readonly int ALT_3 = _cursesPINVOKE.ALT_3_get();
  public static readonly int ALT_4 = _cursesPINVOKE.ALT_4_get();
  public static readonly int ALT_5 = _cursesPINVOKE.ALT_5_get();
  public static readonly int ALT_6 = _cursesPINVOKE.ALT_6_get();
  public static readonly int ALT_7 = _cursesPINVOKE.ALT_7_get();
  public static readonly int ALT_8 = _cursesPINVOKE.ALT_8_get();
  public static readonly int ALT_9 = _cursesPINVOKE.ALT_9_get();
  public static readonly int ALT_A = _cursesPINVOKE.ALT_A_get();
  public static readonly int ALT_B = _cursesPINVOKE.ALT_B_get();
  public static readonly int ALT_C = _cursesPINVOKE.ALT_C_get();
  public static readonly int ALT_D = _cursesPINVOKE.ALT_D_get();
  public static readonly int ALT_E = _cursesPINVOKE.ALT_E_get();
  public static readonly int ALT_F = _cursesPINVOKE.ALT_F_get();
  public static readonly int ALT_G = _cursesPINVOKE.ALT_G_get();
  public static readonly int ALT_H = _cursesPINVOKE.ALT_H_get();
  public static readonly int ALT_I = _cursesPINVOKE.ALT_I_get();
  public static readonly int ALT_J = _cursesPINVOKE.ALT_J_get();
  public static readonly int ALT_K = _cursesPINVOKE.ALT_K_get();
  public static readonly int ALT_L = _cursesPINVOKE.ALT_L_get();
  public static readonly int ALT_M = _cursesPINVOKE.ALT_M_get();
  public static readonly int ALT_N = _cursesPINVOKE.ALT_N_get();
  public static readonly int ALT_O = _cursesPINVOKE.ALT_O_get();
  public static readonly int ALT_P = _cursesPINVOKE.ALT_P_get();
  public static readonly int ALT_Q = _cursesPINVOKE.ALT_Q_get();
  public static readonly int ALT_R = _cursesPINVOKE.ALT_R_get();
  public static readonly int ALT_S = _cursesPINVOKE.ALT_S_get();
  public static readonly int ALT_T = _cursesPINVOKE.ALT_T_get();
  public static readonly int ALT_U = _cursesPINVOKE.ALT_U_get();
  public static readonly int ALT_V = _cursesPINVOKE.ALT_V_get();
  public static readonly int ALT_W = _cursesPINVOKE.ALT_W_get();
  public static readonly int ALT_X = _cursesPINVOKE.ALT_X_get();
  public static readonly int ALT_Y = _cursesPINVOKE.ALT_Y_get();
  public static readonly int ALT_Z = _cursesPINVOKE.ALT_Z_get();
  public static readonly int CTL_LEFT = _cursesPINVOKE.CTL_LEFT_get();
  public static readonly int CTL_RIGHT = _cursesPINVOKE.CTL_RIGHT_get();
  public static readonly int CTL_PGUP = _cursesPINVOKE.CTL_PGUP_get();
  public static readonly int CTL_PGDN = _cursesPINVOKE.CTL_PGDN_get();
  public static readonly int CTL_HOME = _cursesPINVOKE.CTL_HOME_get();
  public static readonly int CTL_END = _cursesPINVOKE.CTL_END_get();
  public static readonly int KEY_A1 = _cursesPINVOKE.KEY_A1_get();
  public static readonly int KEY_A2 = _cursesPINVOKE.KEY_A2_get();
  public static readonly int KEY_A3 = _cursesPINVOKE.KEY_A3_get();
  public static readonly int KEY_B1 = _cursesPINVOKE.KEY_B1_get();
  public static readonly int KEY_B2 = _cursesPINVOKE.KEY_B2_get();
  public static readonly int KEY_B3 = _cursesPINVOKE.KEY_B3_get();
  public static readonly int KEY_C1 = _cursesPINVOKE.KEY_C1_get();
  public static readonly int KEY_C2 = _cursesPINVOKE.KEY_C2_get();
  public static readonly int KEY_C3 = _cursesPINVOKE.KEY_C3_get();
  public static readonly int PADSLASH = _cursesPINVOKE.PADSLASH_get();
  public static readonly int PADENTER = _cursesPINVOKE.PADENTER_get();
  public static readonly int CTL_PADENTER = _cursesPINVOKE.CTL_PADENTER_get();
  public static readonly int ALT_PADENTER = _cursesPINVOKE.ALT_PADENTER_get();
  public static readonly int PADSTOP = _cursesPINVOKE.PADSTOP_get();
  public static readonly int PADSTAR = _cursesPINVOKE.PADSTAR_get();
  public static readonly int PADMINUS = _cursesPINVOKE.PADMINUS_get();
  public static readonly int PADPLUS = _cursesPINVOKE.PADPLUS_get();
  public static readonly int CTL_PADSTOP = _cursesPINVOKE.CTL_PADSTOP_get();
  public static readonly int CTL_PADCENTER = _cursesPINVOKE.CTL_PADCENTER_get();
  public static readonly int CTL_PADPLUS = _cursesPINVOKE.CTL_PADPLUS_get();
  public static readonly int CTL_PADMINUS = _cursesPINVOKE.CTL_PADMINUS_get();
  public static readonly int CTL_PADSLASH = _cursesPINVOKE.CTL_PADSLASH_get();
  public static readonly int CTL_PADSTAR = _cursesPINVOKE.CTL_PADSTAR_get();
  public static readonly int ALT_PADPLUS = _cursesPINVOKE.ALT_PADPLUS_get();
  public static readonly int ALT_PADMINUS = _cursesPINVOKE.ALT_PADMINUS_get();
  public static readonly int ALT_PADSLASH = _cursesPINVOKE.ALT_PADSLASH_get();
  public static readonly int ALT_PADSTAR = _cursesPINVOKE.ALT_PADSTAR_get();
  public static readonly int ALT_PADSTOP = _cursesPINVOKE.ALT_PADSTOP_get();
  public static readonly int CTL_INS = _cursesPINVOKE.CTL_INS_get();
  public static readonly int ALT_DEL = _cursesPINVOKE.ALT_DEL_get();
  public static readonly int ALT_INS = _cursesPINVOKE.ALT_INS_get();
  public static readonly int CTL_UP = _cursesPINVOKE.CTL_UP_get();
  public static readonly int CTL_DOWN = _cursesPINVOKE.CTL_DOWN_get();
  public static readonly int CTL_TAB = _cursesPINVOKE.CTL_TAB_get();
  public static readonly int ALT_TAB = _cursesPINVOKE.ALT_TAB_get();
  public static readonly int ALT_MINUS = _cursesPINVOKE.ALT_MINUS_get();
  public static readonly int ALT_EQUAL = _cursesPINVOKE.ALT_EQUAL_get();
  public static readonly int ALT_HOME = _cursesPINVOKE.ALT_HOME_get();
  public static readonly int ALT_PGUP = _cursesPINVOKE.ALT_PGUP_get();
  public static readonly int ALT_PGDN = _cursesPINVOKE.ALT_PGDN_get();
  public static readonly int ALT_END = _cursesPINVOKE.ALT_END_get();
  public static readonly int ALT_UP = _cursesPINVOKE.ALT_UP_get();
  public static readonly int ALT_DOWN = _cursesPINVOKE.ALT_DOWN_get();
  public static readonly int ALT_RIGHT = _cursesPINVOKE.ALT_RIGHT_get();
  public static readonly int ALT_LEFT = _cursesPINVOKE.ALT_LEFT_get();
  public static readonly int ALT_ENTER = _cursesPINVOKE.ALT_ENTER_get();
  public static readonly int ALT_ESC = _cursesPINVOKE.ALT_ESC_get();
  public static readonly int ALT_BQUOTE = _cursesPINVOKE.ALT_BQUOTE_get();
  public static readonly int ALT_LBRACKET = _cursesPINVOKE.ALT_LBRACKET_get();
  public static readonly int ALT_RBRACKET = _cursesPINVOKE.ALT_RBRACKET_get();
  public static readonly int ALT_SEMICOLON = _cursesPINVOKE.ALT_SEMICOLON_get();
  public static readonly int ALT_FQUOTE = _cursesPINVOKE.ALT_FQUOTE_get();
  public static readonly int ALT_COMMA = _cursesPINVOKE.ALT_COMMA_get();
  public static readonly int ALT_STOP = _cursesPINVOKE.ALT_STOP_get();
  public static readonly int ALT_FSLASH = _cursesPINVOKE.ALT_FSLASH_get();
  public static readonly int ALT_BKSP = _cursesPINVOKE.ALT_BKSP_get();
  public static readonly int CTL_BKSP = _cursesPINVOKE.CTL_BKSP_get();
  public static readonly int PAD0 = _cursesPINVOKE.PAD0_get();
  public static readonly int CTL_PAD0 = _cursesPINVOKE.CTL_PAD0_get();
  public static readonly int CTL_PAD1 = _cursesPINVOKE.CTL_PAD1_get();
  public static readonly int CTL_PAD2 = _cursesPINVOKE.CTL_PAD2_get();
  public static readonly int CTL_PAD3 = _cursesPINVOKE.CTL_PAD3_get();
  public static readonly int CTL_PAD4 = _cursesPINVOKE.CTL_PAD4_get();
  public static readonly int CTL_PAD5 = _cursesPINVOKE.CTL_PAD5_get();
  public static readonly int CTL_PAD6 = _cursesPINVOKE.CTL_PAD6_get();
  public static readonly int CTL_PAD7 = _cursesPINVOKE.CTL_PAD7_get();
  public static readonly int CTL_PAD8 = _cursesPINVOKE.CTL_PAD8_get();
  public static readonly int CTL_PAD9 = _cursesPINVOKE.CTL_PAD9_get();
  public static readonly int ALT_PAD0 = _cursesPINVOKE.ALT_PAD0_get();
  public static readonly int ALT_PAD1 = _cursesPINVOKE.ALT_PAD1_get();
  public static readonly int ALT_PAD2 = _cursesPINVOKE.ALT_PAD2_get();
  public static readonly int ALT_PAD3 = _cursesPINVOKE.ALT_PAD3_get();
  public static readonly int ALT_PAD4 = _cursesPINVOKE.ALT_PAD4_get();
  public static readonly int ALT_PAD5 = _cursesPINVOKE.ALT_PAD5_get();
  public static readonly int ALT_PAD6 = _cursesPINVOKE.ALT_PAD6_get();
  public static readonly int ALT_PAD7 = _cursesPINVOKE.ALT_PAD7_get();
  public static readonly int ALT_PAD8 = _cursesPINVOKE.ALT_PAD8_get();
  public static readonly int ALT_PAD9 = _cursesPINVOKE.ALT_PAD9_get();
  public static readonly int CTL_DEL = _cursesPINVOKE.CTL_DEL_get();
  public static readonly int ALT_BSLASH = _cursesPINVOKE.ALT_BSLASH_get();
  public static readonly int CTL_ENTER = _cursesPINVOKE.CTL_ENTER_get();
  public static readonly int SHF_PADENTER = _cursesPINVOKE.SHF_PADENTER_get();
  public static readonly int SHF_PADSLASH = _cursesPINVOKE.SHF_PADSLASH_get();
  public static readonly int SHF_PADSTAR = _cursesPINVOKE.SHF_PADSTAR_get();
  public static readonly int SHF_PADPLUS = _cursesPINVOKE.SHF_PADPLUS_get();
  public static readonly int SHF_PADMINUS = _cursesPINVOKE.SHF_PADMINUS_get();
  public static readonly int SHF_UP = _cursesPINVOKE.SHF_UP_get();
  public static readonly int SHF_DOWN = _cursesPINVOKE.SHF_DOWN_get();
  public static readonly int SHF_IC = _cursesPINVOKE.SHF_IC_get();
  public static readonly int SHF_DC = _cursesPINVOKE.SHF_DC_get();
  public static readonly int KEY_MOUSE = _cursesPINVOKE.KEY_MOUSE_get();
  public static readonly int KEY_SHIFT_L = _cursesPINVOKE.KEY_SHIFT_L_get();
  public static readonly int KEY_SHIFT_R = _cursesPINVOKE.KEY_SHIFT_R_get();
  public static readonly int KEY_CONTROL_L = _cursesPINVOKE.KEY_CONTROL_L_get();
  public static readonly int KEY_CONTROL_R = _cursesPINVOKE.KEY_CONTROL_R_get();
  public static readonly int KEY_ALT_L = _cursesPINVOKE.KEY_ALT_L_get();
  public static readonly int KEY_ALT_R = _cursesPINVOKE.KEY_ALT_R_get();
  public static readonly int KEY_RESIZE = _cursesPINVOKE.KEY_RESIZE_get();
  public static readonly int KEY_SUP = _cursesPINVOKE.KEY_SUP_get();
  public static readonly int KEY_SDOWN = _cursesPINVOKE.KEY_SDOWN_get();
  public static readonly int CTL_SEMICOLON = _cursesPINVOKE.CTL_SEMICOLON_get();
  public static readonly int CTL_EQUAL = _cursesPINVOKE.CTL_EQUAL_get();
  public static readonly int CTL_COMMA = _cursesPINVOKE.CTL_COMMA_get();
  public static readonly int CTL_MINUS = _cursesPINVOKE.CTL_MINUS_get();
  public static readonly int CTL_STOP = _cursesPINVOKE.CTL_STOP_get();
  public static readonly int CTL_FSLASH = _cursesPINVOKE.CTL_FSLASH_get();
  public static readonly int CTL_BQUOTE = _cursesPINVOKE.CTL_BQUOTE_get();
  public static readonly int KEY_APPS = _cursesPINVOKE.KEY_APPS_get();
  public static readonly int KEY_SAPPS = _cursesPINVOKE.KEY_SAPPS_get();
  public static readonly int CTL_APPS = _cursesPINVOKE.CTL_APPS_get();
  public static readonly int ALT_APPS = _cursesPINVOKE.ALT_APPS_get();
  public static readonly int KEY_PAUSE = _cursesPINVOKE.KEY_PAUSE_get();
  public static readonly int KEY_SPAUSE = _cursesPINVOKE.KEY_SPAUSE_get();
  public static readonly int CTL_PAUSE = _cursesPINVOKE.CTL_PAUSE_get();
  public static readonly int KEY_PRINTSCREEN = _cursesPINVOKE.KEY_PRINTSCREEN_get();
  public static readonly int ALT_PRINTSCREEN = _cursesPINVOKE.ALT_PRINTSCREEN_get();
  public static readonly int KEY_SCROLLLOCK = _cursesPINVOKE.KEY_SCROLLLOCK_get();
  public static readonly int ALT_SCROLLLOCK = _cursesPINVOKE.ALT_SCROLLLOCK_get();
  public static readonly int CTL_0 = _cursesPINVOKE.CTL_0_get();
  public static readonly int CTL_1 = _cursesPINVOKE.CTL_1_get();
  public static readonly int CTL_2 = _cursesPINVOKE.CTL_2_get();
  public static readonly int CTL_3 = _cursesPINVOKE.CTL_3_get();
  public static readonly int CTL_4 = _cursesPINVOKE.CTL_4_get();
  public static readonly int CTL_5 = _cursesPINVOKE.CTL_5_get();
  public static readonly int CTL_6 = _cursesPINVOKE.CTL_6_get();
  public static readonly int CTL_7 = _cursesPINVOKE.CTL_7_get();
  public static readonly int CTL_8 = _cursesPINVOKE.CTL_8_get();
  public static readonly int CTL_9 = _cursesPINVOKE.CTL_9_get();
  public static readonly int KEY_BROWSER_BACK = _cursesPINVOKE.KEY_BROWSER_BACK_get();
  public static readonly int KEY_SBROWSER_BACK = _cursesPINVOKE.KEY_SBROWSER_BACK_get();
  public static readonly int KEY_CBROWSER_BACK = _cursesPINVOKE.KEY_CBROWSER_BACK_get();
  public static readonly int KEY_ABROWSER_BACK = _cursesPINVOKE.KEY_ABROWSER_BACK_get();
  public static readonly int KEY_BROWSER_FWD = _cursesPINVOKE.KEY_BROWSER_FWD_get();
  public static readonly int KEY_SBROWSER_FWD = _cursesPINVOKE.KEY_SBROWSER_FWD_get();
  public static readonly int KEY_CBROWSER_FWD = _cursesPINVOKE.KEY_CBROWSER_FWD_get();
  public static readonly int KEY_ABROWSER_FWD = _cursesPINVOKE.KEY_ABROWSER_FWD_get();
  public static readonly int KEY_BROWSER_REF = _cursesPINVOKE.KEY_BROWSER_REF_get();
  public static readonly int KEY_SBROWSER_REF = _cursesPINVOKE.KEY_SBROWSER_REF_get();
  public static readonly int KEY_CBROWSER_REF = _cursesPINVOKE.KEY_CBROWSER_REF_get();
  public static readonly int KEY_ABROWSER_REF = _cursesPINVOKE.KEY_ABROWSER_REF_get();
  public static readonly int KEY_BROWSER_STOP = _cursesPINVOKE.KEY_BROWSER_STOP_get();
  public static readonly int KEY_SBROWSER_STOP = _cursesPINVOKE.KEY_SBROWSER_STOP_get();
  public static readonly int KEY_CBROWSER_STOP = _cursesPINVOKE.KEY_CBROWSER_STOP_get();
  public static readonly int KEY_ABROWSER_STOP = _cursesPINVOKE.KEY_ABROWSER_STOP_get();
  public static readonly int KEY_SEARCH = _cursesPINVOKE.KEY_SEARCH_get();
  public static readonly int KEY_SSEARCH = _cursesPINVOKE.KEY_SSEARCH_get();
  public static readonly int KEY_CSEARCH = _cursesPINVOKE.KEY_CSEARCH_get();
  public static readonly int KEY_ASEARCH = _cursesPINVOKE.KEY_ASEARCH_get();
  public static readonly int KEY_FAVORITES = _cursesPINVOKE.KEY_FAVORITES_get();
  public static readonly int KEY_SFAVORITES = _cursesPINVOKE.KEY_SFAVORITES_get();
  public static readonly int KEY_CFAVORITES = _cursesPINVOKE.KEY_CFAVORITES_get();
  public static readonly int KEY_AFAVORITES = _cursesPINVOKE.KEY_AFAVORITES_get();
  public static readonly int KEY_BROWSER_HOME = _cursesPINVOKE.KEY_BROWSER_HOME_get();
  public static readonly int KEY_SBROWSER_HOME = _cursesPINVOKE.KEY_SBROWSER_HOME_get();
  public static readonly int KEY_CBROWSER_HOME = _cursesPINVOKE.KEY_CBROWSER_HOME_get();
  public static readonly int KEY_ABROWSER_HOME = _cursesPINVOKE.KEY_ABROWSER_HOME_get();
  public static readonly int KEY_VOLUME_MUTE = _cursesPINVOKE.KEY_VOLUME_MUTE_get();
  public static readonly int KEY_SVOLUME_MUTE = _cursesPINVOKE.KEY_SVOLUME_MUTE_get();
  public static readonly int KEY_CVOLUME_MUTE = _cursesPINVOKE.KEY_CVOLUME_MUTE_get();
  public static readonly int KEY_AVOLUME_MUTE = _cursesPINVOKE.KEY_AVOLUME_MUTE_get();
  public static readonly int KEY_VOLUME_DOWN = _cursesPINVOKE.KEY_VOLUME_DOWN_get();
  public static readonly int KEY_SVOLUME_DOWN = _cursesPINVOKE.KEY_SVOLUME_DOWN_get();
  public static readonly int KEY_CVOLUME_DOWN = _cursesPINVOKE.KEY_CVOLUME_DOWN_get();
  public static readonly int KEY_AVOLUME_DOWN = _cursesPINVOKE.KEY_AVOLUME_DOWN_get();
  public static readonly int KEY_VOLUME_UP = _cursesPINVOKE.KEY_VOLUME_UP_get();
  public static readonly int KEY_SVOLUME_UP = _cursesPINVOKE.KEY_SVOLUME_UP_get();
  public static readonly int KEY_CVOLUME_UP = _cursesPINVOKE.KEY_CVOLUME_UP_get();
  public static readonly int KEY_AVOLUME_UP = _cursesPINVOKE.KEY_AVOLUME_UP_get();
  public static readonly int KEY_NEXT_TRACK = _cursesPINVOKE.KEY_NEXT_TRACK_get();
  public static readonly int KEY_SNEXT_TRACK = _cursesPINVOKE.KEY_SNEXT_TRACK_get();
  public static readonly int KEY_CNEXT_TRACK = _cursesPINVOKE.KEY_CNEXT_TRACK_get();
  public static readonly int KEY_ANEXT_TRACK = _cursesPINVOKE.KEY_ANEXT_TRACK_get();
  public static readonly int KEY_PREV_TRACK = _cursesPINVOKE.KEY_PREV_TRACK_get();
  public static readonly int KEY_SPREV_TRACK = _cursesPINVOKE.KEY_SPREV_TRACK_get();
  public static readonly int KEY_CPREV_TRACK = _cursesPINVOKE.KEY_CPREV_TRACK_get();
  public static readonly int KEY_APREV_TRACK = _cursesPINVOKE.KEY_APREV_TRACK_get();
  public static readonly int KEY_MEDIA_STOP = _cursesPINVOKE.KEY_MEDIA_STOP_get();
  public static readonly int KEY_SMEDIA_STOP = _cursesPINVOKE.KEY_SMEDIA_STOP_get();
  public static readonly int KEY_CMEDIA_STOP = _cursesPINVOKE.KEY_CMEDIA_STOP_get();
  public static readonly int KEY_AMEDIA_STOP = _cursesPINVOKE.KEY_AMEDIA_STOP_get();
  public static readonly int KEY_PLAY_PAUSE = _cursesPINVOKE.KEY_PLAY_PAUSE_get();
  public static readonly int KEY_SPLAY_PAUSE = _cursesPINVOKE.KEY_SPLAY_PAUSE_get();
  public static readonly int KEY_CPLAY_PAUSE = _cursesPINVOKE.KEY_CPLAY_PAUSE_get();
  public static readonly int KEY_APLAY_PAUSE = _cursesPINVOKE.KEY_APLAY_PAUSE_get();
  public static readonly int KEY_LAUNCH_MAIL = _cursesPINVOKE.KEY_LAUNCH_MAIL_get();
  public static readonly int KEY_SLAUNCH_MAIL = _cursesPINVOKE.KEY_SLAUNCH_MAIL_get();
  public static readonly int KEY_CLAUNCH_MAIL = _cursesPINVOKE.KEY_CLAUNCH_MAIL_get();
  public static readonly int KEY_ALAUNCH_MAIL = _cursesPINVOKE.KEY_ALAUNCH_MAIL_get();
  public static readonly int KEY_MEDIA_SELECT = _cursesPINVOKE.KEY_MEDIA_SELECT_get();
  public static readonly int KEY_SMEDIA_SELECT = _cursesPINVOKE.KEY_SMEDIA_SELECT_get();
  public static readonly int KEY_CMEDIA_SELECT = _cursesPINVOKE.KEY_CMEDIA_SELECT_get();
  public static readonly int KEY_AMEDIA_SELECT = _cursesPINVOKE.KEY_AMEDIA_SELECT_get();
  public static readonly int KEY_LAUNCH_APP1 = _cursesPINVOKE.KEY_LAUNCH_APP1_get();
  public static readonly int KEY_SLAUNCH_APP1 = _cursesPINVOKE.KEY_SLAUNCH_APP1_get();
  public static readonly int KEY_CLAUNCH_APP1 = _cursesPINVOKE.KEY_CLAUNCH_APP1_get();
  public static readonly int KEY_ALAUNCH_APP1 = _cursesPINVOKE.KEY_ALAUNCH_APP1_get();
  public static readonly int KEY_LAUNCH_APP2 = _cursesPINVOKE.KEY_LAUNCH_APP2_get();
  public static readonly int KEY_SLAUNCH_APP2 = _cursesPINVOKE.KEY_SLAUNCH_APP2_get();
  public static readonly int KEY_CLAUNCH_APP2 = _cursesPINVOKE.KEY_CLAUNCH_APP2_get();
  public static readonly int KEY_ALAUNCH_APP2 = _cursesPINVOKE.KEY_ALAUNCH_APP2_get();
  public static readonly int KEY_MIN = _cursesPINVOKE.KEY_MIN_get();
  public static readonly int KEY_MAX = _cursesPINVOKE.KEY_MAX_get();
}
